# Auto-install plug.kak
evaluate-commands %sh{
    plugins="$HOME/.config/kak/plugins"
    mkdir -p $plugins
    [ ! -e "$plugins/plug.kak" ] && \
        git clone -q https://github.com/andreyorst/plug.kak "$plugins/plug.kak"
    printf "%s\n" "source '$plugins/plug.kak/rc/plug.kak'"
}
plug "andreyorst/plug.kak" noload

# Manage buffers
plug 'delapouite/kakoune-buffers' %{
    map global normal <c-b>  ': enter-buffers-mode<ret>' -docstring 'buffers'
    map global normal <c-o>  ': enter-buffers-mode<ret>f' -docstring 'search open buffers'
}

# Highlight searches
plug 'alexherbo2/search-highlighter.kak'

# Crosshairs
plug 'insipx/kak-crosshairs' %{
    set-face global crosshairs_line default,rgb:232834
    cursorline
}

# Powerline status bar
plug "andreyorst/powerline.kak" defer powerline %{
    powerline-separator arrow
} config %{
    powerline-start
}

# Theme
plug "jaredramirez/ayu-kak" theme config %{
    colorscheme ayu-mirage
}
plug "jaredramirez/ayu-kak-powerline" defer powerline %{
    powerline-theme ayu-mirage
}

# Tabs
plug "andreyorst/smarttab.kak" defer smarttab %{
    set-option buffer indentwidth 2
    set-option buffer softtabstop 2

    hook global WinSetOption filetype=(elm|psql|pgsql|sql) %{
        set-option buffer indentwidth 4
        set-option buffer softtabstop 4
    }
    hook global WinSetOption filetype=(rust|markdown|kak|lisp|scheme|sh|perl|haskell|javascript|rescript|yaml|nix) %{
        set-option buffer indentwidth 2
        set-option buffer softtabstop 2
    }
} config %{
    hook global WinSetOption filetype=(rust|markdown|kak|lisp|scheme|sh|perl|elm|haskell|javascript|rescript|psql|pgsql|sql|csv|yaml|nix) expandtab
    hook global WinSetOption filetype=(makefile) noexpandtab
    hook global WinSetOption filetype=(c|cpp) smarttab
}

# Auto-format
hook global WinSetOption filetype=elm %{
    set window formatcmd 'elm-format --stdin'
    hook buffer BufWritePre .* %{format}
}
hook global WinSetOption filetype=haskell %{
    set window formatcmd 'ormolu'
    hook buffer BufWritePre .* %{format}
}
hook global WinSetOption filetype=javascript %{
    set window formatcmd 'prettier'
    hook buffer BufWritePre .* %{format}
}

# Use tab to autocomplete
hook global InsertCompletionShow .* %{
    try %{
        execute-keys -draft 'h<a-K>\h<ret>'
        map window insert <tab> <c-n>
        map window insert <s-tab> <c-p>
        map window insert <ret> <space>
    }
}
hook global InsertCompletionHide .* %{
    unmap window insert <tab> <c-n>
    unmap window insert <s-tab> <c-p>
    unmap window insert <ret> <space>
}

# kcr (installed globally via nix)
evaluate-commands %sh{
    kcr init kakoune
}

# kak-lsp (installed globally via nix)
eval %sh{kak-lsp --kakoune -s $kak_session}
lsp-enable
set global lsp_diagnostic_line_error_sign '║'
set global lsp_diagnostic_line_warning_sign '┊'
set-option global lsp_auto_highlight_references true
set-option global lsp_hover_anchor false
lsp-auto-hover-enable
define-command lsp-restart -docstring 'restart lsp server' %{ lsp-stop; lsp-start }
hook global KakEnd .* lsp-exit

# Copy/paste with system clipboard
hook global NormalKey y|d|c %{ nop %sh{
    printf %s "$kak_reg_dquote" | pbcopy
}}

# Fuzzy find files
def fuzzy -params 1 -shell-script-candidates %{ rg --files --hidden } %{ edit %arg{1} }
map global normal <c-p> ':fuzzy ' -docstring 'search files'

# Alt-K inverse of alt-j
map global normal <a-k> 'i<ret><esc>' -docstring 'split line at cursor'

# Save & quit
define-command x "write-all; quit" -docstring "save and quit" 

# Easier commenting
define-command cl "comment-line" -docstring "comment a line" 
define-command cb "comment-block" -docstring "comment a line" 

# Show line numbers
add-highlighter global/ number-lines -hlcursor

# Keep cursor in center of screen
set-option global scrolloff 999,10

# Display the status bar on top
set-option -add global ui_options ncurses_status_on_top=true

# Disable all mouse interaction
set-option -add global ui_options ncurses_enable_mouse=false

# x to select down, X to select up
def -params 1 extend-line-down %{
    exec "<a-:>%arg{1}X"
}
def -params 1 extend-line-up %{
    exec "<a-:><a-;>%arg{1}K<a-;>"
    try %{
        exec -draft ';<a-K>\n<ret>'
        exec X
    }
    exec '<a-;><a-X>'
}
map global normal x ':extend-line-down %val{count}<ret>'
map global normal X ':extend-line-up %val{count}<ret>'

# Easily convert between cases
def camelcase %{
    exec '`s[-_<space>]<ret>d~<a-i>w'
}
def snakecase %{
    exec '<a-:><a-;>s-|[a-z][A-Z]<ret>;a<space><esc>s[-\s]+<ret>c_<esc><a-i>w`'
}
def kebabcase %{
    exec '<a-:><a-;>s_|[a-z][A-Z]<ret>;a<space><esc>s[_\s]+<ret>c-<esc><a-i>w`'
}

# Case-insensitive by defult
map global normal / /(?i)

# Highlight TODO & FIXME
add-highlighter global/ regex \b(TODO|FIXME)\b 0:default+ib

# <a-K> inverse of <a-J>
map global normal <c-K> i<ret><esc> -docstring 'split line at cursor'

# Make selection a bit easier - https://discuss.kakoune.com/t/sublime-text-style-multiple-cursor-select-add-mapping/150
define-command -override -docstring "select a word under cursor, or add cursor on next occurrence of current selection" \
select-or-add-cursor %{ execute-keys -save-regs '' %sh{
    if [ $(expr $(echo $kak_selection | wc -m) - 1) -eq 1 ]; then
        echo "<a-i>w*"
    else
        echo "*<s-n>"
    fi
}}

map global normal '<s-a-n>' ': select-or-add-cursor<ret>' -docstring "add cursor on current word, and jump to the next match"



# Support for Rescript
# Forked from https://github.com/mawww/kakoune/blob/master/rc/filetype/elm.kak

# Detection
# ‾‾‾‾‾‾‾‾‾

hook global BufCreate .*[.](res) %{
  set-option buffer filetype rescript
}

# Initialization
# ‾‾‾‾‾‾‾‾‾‾‾‾‾‾

hook global WinSetOption filetype=rescript %{
  require-module rescript

  hook window ModeChange pop:insert:.* -group rescript-trim-indent  rescript-trim-indent
  hook window InsertChar \n -group rescript-indent rescript-indent-on-new-line

  hook -once -always window WinSetOption filetype=.* %{ remove-hooks window rescript-.+ }
}

hook -group rescript-highlight global WinSetOption filetype=rescript %{
  add-highlighter window/rescript ref rescript
  hook -once -always window WinSetOption filetype=.* %{ remove-highlighter window/rescript }
}

provide-module rescript %[

# Highlighters
# ‾‾‾‾‾‾‾‾‾‾‾‾

add-highlighter shared/rescript               regions
add-highlighter shared/rescript/code          default-region group
add-highlighter shared/rescript/string        region         '"'     (?<!\\)(\\\\)*"       fill string
add-highlighter shared/rescript/template      region         "`"     (?<!\\)(\\\\)*`       fill string
add-highlighter shared/rescript/comment_line  region         '//'    '$'                   fill comment
add-highlighter shared/rescript/comment       region         /\*     \*/                   fill comment

add-highlighter shared/rescript/code/ regex \b[a-z]\w*\b                                                        0:variable
add-highlighter shared/rescript/code/ regex \K#[A-Za-z]*                                                        0:function
add-highlighter shared/rescript/code/ regex \K~\w*                                                              0:attribute
add-highlighter shared/rescript/code/ regex \b[a-z]\w*\b\s*(?==)                                                0:attribute
add-highlighter shared/rescript/code/ regex \K'[a-z]\w*\b                                                       0:type
add-highlighter shared/rescript/code/ regex "-?\b[0-9]*\.?[0-9]+"                                               0:value
add-highlighter shared/rescript/code/ regex \K'.'                                                               0:value
add-highlighter shared/rescript/code/ regex @(as|get|inline|int|meth|new|return|scope|send|set|string|this)     0:meta
add-highlighter shared/rescript/code/ regex @(uncurry|unwrap|val|variadic|bs\.\w*|react\.\w*)                   0:meta
add-highlighter shared/rescript/code/ regex \b[A-Z]\w*\b                                                        0:meta
add-highlighter shared/rescript/code/ regex \b(module|include|open|private)\b                                   0:module
add-highlighter shared/rescript/code/ regex \b(let|rec|type|external|mutable|lazy|of|with|if|else)\b            0:keyword
add-highlighter shared/rescript/code/ regex \b(then|and|as|for|to|downto|while|try|catch)\b                     0:keyword
add-highlighter shared/rescript/code/ regex \b(exception|assert|_)\b)                                           0:keyword
add-highlighter shared/rescript/code/ regex \b(=>|+|+.|-|-.|*|*.|/|/.)\b                                        0:operator


define-command -hidden rescript-trim-indent %{
  # remove trailing white spaces
  try %{ execute-keys -draft -itersel <a-x> s \h+$ <ret> d }
}

define-command -hidden rescript-indent-after "
  execute-keys -draft <semicolon> k x <a-k> ^\\h*if|[=(]$|\\b(case\\h+[\\w']+\\h+of|let|in)$|(\\{\\h+\\w+|\\w+\\h+->)$ <ret> j <a-gt>
"

define-command -hidden rescript-indent-on-new-line %{
  evaluate-commands -draft -itersel %{
    # copy -- comments prefix and following white spaces
    try %{ execute-keys -draft k <a-x> s ^\h*\K--\h* <ret> y gh j P }
    # preserve previous line indent
    try %{ execute-keys -draft <semicolon> K <a-&> }
    # align to first clause
    try %{ execute-keys -draft <semicolon> k x X s ^\h*(if|then|else)?\h*(([\w']+\h+)+=)?\h*(case\h+[\w']+\h+of|let)\h+\K.* <ret> s \A|.\z <ret> & }
    # filter previous line
    try %{ execute-keys -draft k : rescript-trim-indent <ret> }
    # indent after lines beginning with condition or ending with expression or =(
    try %{ rescript-indent-after }
  }
}

]
