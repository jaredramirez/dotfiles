# Auto-install plug.kak
evaluate-commands %sh{
    plugins="$HOME/.config/kak/plugins"
    mkdir -p $plugins
    [ ! -e "$plugins/plug.kak" ] && \
        git clone -q https://github.com/andreyorst/plug.kak "$plugins/plug.kak"
    printf "%s\n" "source '$plugins/plug.kak/rc/plug.kak'"
}
plug "andreyorst/plug.kak" noload

# Manage buffers
plug 'delapouite/kakoune-buffers' config %{
    map global normal <c-b>  ': enter-buffers-mode<ret>' -docstring 'buffers'
    map global normal <c-l>  ': enter-buffers-mode<ret>a' -docstring 'search open buffers'
}

# Vertical Selection
plug 'occivink/kakoune-vertical-selection' config %{
  map global user v     ': vertical-selection-down<ret>'
  map global user <a-v> ': vertical-selection-up<ret>'
  map global user V     ': vertical-selection-up-and-down<ret>'
}

# Clipboard integration
plug 'lePerdu/kakboard' config %{
  hook global WinCreate .* %{ kakboard-enable }
}

# Enhanced objects
plug 'Delapouite/kakoune-text-objects'

# Enhanced objects
plug 'occivink/kakoune-buffer-switcher'

# Crosshairs
plug 'insipx/kak-crosshairs' config %{
    set-face global crosshairs_line default,rgb:232834
    cursorline
}

# Status line
plug "eburghar/kakship" do %{
  cargo install --force --path . --root ~/.local
  [ ! -e $kak_config/starship.toml ] && cp starship.toml $kak_config/
} config %{
  kakship-enable
}


# Theme
plug "jaredramirez/ayu-kak" theme config %{
    colorscheme ayu-mirage
}

# Tabs
plug "andreyorst/smarttab.kak" defer smarttab %{
    set-option buffer indentwidth 2
    set-option buffer softtabstop 2

    hook global WinSetOption filetype=(elm|plpgsql|sql) %{
        set-option buffer indentwidth 4
        set-option buffer softtabstop 4
    }
    hook global WinSetOption filetype=(rust|markdown|kak|lisp|scheme|sh|perl|haskell|javascript|rescript|yaml|nix) %{
        set-option buffer indentwidth 2
        set-option buffer softtabstop 2
    }
} config %{
    hook global WinSetOption filetype=(rust|markdown|kak|lisp|scheme|sh|perl|elm|haskell|javascript|rescript|plpgsql|sql|csv|yaml|nix) expandtab
    hook global WinSetOption filetype=(makefile) noexpandtab
    hook global WinSetOption filetype=(c|cpp) smarttab
}

# Use tab to autocomplete
hook global InsertCompletionShow .* %{
    try %{
        execute-keys -draft 'h<a-K>\h<ret>'
        map window insert <tab> <c-n>
        map window insert <s-tab> <c-p>
        map window insert <ret> <space>
    }
}
hook global InsertCompletionHide .* %{
    unmap window insert <tab> <c-n>
    unmap window insert <s-tab> <c-p>
    unmap window insert <ret> <space>
}

# Langauge Server - kak-lsp 
plug "kak-lsp/kak-lsp" do %{
  cargo build --release --locked
} config %{
  # To debug kak-lsp, add " -vvv --log /tmp/kak-lsp.log" to the command
  set global lsp_cmd "%val{config}/plugins/kak-lsp/target/release/kak-lsp -s %val{session} --config ~/.config/kak-lsp/kak-lsp.toml -vvv --log /tmp/kak-lsp.log"
   
  set global lsp_diagnostic_line_error_sign '║'
  set global lsp_diagnostic_line_warning_sign '┊'

  set-option global lsp_auto_highlight_references true
  set-option global lsp_hover_anchor false
  set-option global lsp_hover_max_lines 8

  lsp-auto-hover-enable
  lsp-auto-signature-help-enable
  lsp-auto-hover-insert-mode-disable

  map global normal <a-d> ': enter-user-mode lsp<ret>' -docstring 'search files'

  define-command lsp-restart -docstring 'restart lsp server' %{ lsp-stop; lsp-start }

  hook global WinSetOption filetype=(haskell|elm|nix|rescript) %{
    hook window BufWritePre .* lsp-formatting-sync
  }

  hook global KakEnd .* lsp-exit
}

# Formatting for languages that don't have a langauge server installed
hook global WinSetOption filetype=javascript %{
    set window formatcmd 'prettier --stdin-filepath foo.js'
    hook buffer BufWritePre .* %{format}
}
hook global WinSetOption filetype=json %{
    set window formatcmd 'prettier --stdin-filepath foo.json'
    hook buffer BufWritePre .* %{format}
}

# Formatting with langauge servers work, but is a bit slow on startup
# 
# hook global WinSetOption filetype=haskell %{
#     set window formatcmd 'ormolu'
#     hook buffer BufWritePre .* %{format}
# }
# hook global WinSetOption filetype=elm %{
#     set window formatcmd 'elm-format --stdin'
#     hook buffer BufWritePre .* %{format}
# }


# Fuzzy find files
def fuzzy -params 1 -shell-script-candidates %{ rg --files --hidden } %{ edit -existing %arg{1} }
  map global normal <c-p> ':fuzzy ' -docstring 'search files'

# Use ripgrep instead of grep
set-option global grepcmd 'rg --follow --vimgrep'
alias global rg grep

# Alt-K inverse of alt-j
map global normal <a-k> 'i<ret><esc>' -docstring 'split line at cursor'

# Save & quit
define-command x "write-all; quit" -docstring "save and quit"

# show whitespaces
# add-highlighter global/ show-whitespaces

# Easier commenting
define-command cl "comment-line" -docstring "comment a line" 
define-command cb "comment-block" -docstring "comment a line" 

# Show line numbers
add-highlighter global/ number-lines -hlcursor

# Keep cursor in center of screen
set-option global scrolloff 999,10

# Display the status bar on top
set-option -add global ui_options ncurses_status_on_top=true

# Disable all mouse interaction
set-option -add global ui_options ncurses_enable_mouse=false

# x to select down, X to select up
def -params 1 extend-line-down %{
    exec "<a-:>%arg{1}X"
}
def -params 1 extend-line-up %{
    exec "<a-:><a-;>%arg{1}K<a-;>"
    try %{
        exec -draft ';<a-K>\n<ret>'
        exec X
    }
    exec '<a-;><a-X>'
}
map global normal x ':extend-line-down %val{count}<ret>'
map global normal <a-x> ':extend-line-up %val{count}<ret>'

# Easily convert between cases
def camelcase %{
    exec '`s[-_<space>]<ret>d~<a-i>w'
}
def snakecase %{
    exec '<a-:><a-;>s-|[a-z][A-Z]<ret>;a<space><esc>s[-\s]+<ret>c_<esc><a-i>w`'
}
def kebabcase %{
    exec '<a-:><a-;>s_|[a-z][A-Z]<ret>;a<space><esc>s[_\s]+<ret>c-<esc><a-i>w`'
}

# Case-insensitive by defult
map global normal / /(?i)

# Highlight TODO & FIXME
add-highlighter global/ regex \b(TODO|FIXME)\b 0:default+ib

# <a-K> inverse of <a-J>
map global normal <c-K> i<ret><esc> -docstring 'split line at cursor'

define-command -override -docstring "select a word under cursor" \
select-word-under-cursor %{ execute-keys -save-regs '' %sh{
  echo "<a-i>w"
}}
map global normal '<a-w>' ': select-word-under-cursor<ret>' -docstring "select word under cursor"

# Make selection a bit easier - https://discuss.kakoune.com/t/sublime-text-style-multiple-cursor-select-add-mapping/150
define-command -override -docstring "select a word under cursor, or add cursor on next occurrence of current selection" \
select-or-add-cursor %{ execute-keys -save-regs '' %sh{
    if [ $(expr $(echo $kak_selection | wc -m) - 1) -eq 1 ]; then
        echo "<a-i>w*"
    else
        echo "*<s-n>"
    fi
}}

map global normal '<c-w>' ': select-or-add-cursor<ret>' -docstring "add cursor on current word, and jump to the next match"

# Support for Rescript Syntax

# Detection
# ‾‾‾‾‾‾‾‾‾

hook global BufCreate .*[.](res) %{
  set-option buffer filetype rescript
}

# Initialization
# ‾‾‾‾‾‾‾‾‾‾‾‾‾‾

hook global WinSetOption filetype=rescript %{
    require-module rescript

    hook window ModeChange pop:insert:.* -group "rescript-trim-indent" rescript-trim-indent
    hook window InsertChar .* -group "rescript-indent" rescript-indent-on-char
    hook window InsertChar \n -group "rescript-indent" rescript-indent-on-new-line

    hook -once -always window WinSetOption filetype=.* "
        remove-hooks window rescript-.+
    "
}

hook -group rescript-highlight global WinSetOption filetype=rescript %{
    add-highlighter window/rescript ref rescript
    hook -once -always window WinSetOption filetype=.* %{ remove-highlighter window/rescript }
}

hook global BufSetOption filetype=rescript %{
    set-option buffer comment_line '//'
    set-option buffer comment_block_begin '/*'
    set-option buffer comment_block_end '*/'
}

provide-module rescript %§

  # Highlighters
  # ‾‾‾‾‾‾‾‾‾‾‾‾

  add-highlighter shared/rescript               regions
  add-highlighter shared/rescript/code          default-region group
  add-highlighter shared/rescript/string        region         '"'     (?<!\\)(\\\\)*"       fill string
  add-highlighter shared/rescript/template      region         "`"     (?<!\\)(\\\\)*`       fill string
  add-highlighter shared/rescript/comment_line  region         '//'    '$'                   fill comment
  add-highlighter shared/rescript/comment       region         /\*     \*/                   fill comment

  add-highlighter shared/rescript/code/ regex \b[_a-z]\w*\b                                                       0:variable
  add-highlighter shared/rescript/code/ regex \K~\w*                                                              0:attribute
  add-highlighter shared/rescript/code/ regex \K'[a-z]\w*\b                                                       0:type
  add-highlighter shared/rescript/code/ regex "-?\b[0-9]*\.?[0-9]+"                                               0:value
  add-highlighter shared/rescript/code/ regex \K'.'                                                               0:value
  add-highlighter shared/rescript/code/ regex @(as|get|inline|int|meth|new|return|scope|send|set|string|this)     0:module
  add-highlighter shared/rescript/code/ regex @(uncurry|unwrap|val|variadic|bs\.\w*|react\.\w*)                   0:module
  add-highlighter shared/rescript/code/ regex \b(module|include|open|private)\b                                   0:module
  add-highlighter shared/rescript/code/ regex \b[A-Z]\w*\b                                                        0:meta
  add-highlighter shared/rescript/code/ regex \b(let|rec|type|external|mutable|lazy|of|with|if|else)\b            0:keyword
  add-highlighter shared/rescript/code/ regex \b(then|switch|and|as|for|to|downto|while|try|catch)\b              0:keyword
  add-highlighter shared/rescript/code/ regex \b(exception|assert|_)\b)                                           0:keyword
  add-highlighter shared/rescript/code/ regex \b(=>|\+|\+.|-|-/.|\*|\*.|/|/.)\b                                   0:operator
  add-highlighter shared/rescript/code/ regex \K#[_A-Za-z]*                                                       0:function

  # add-highlighter "shared/%arg{1}/jsx/tag"  region -recurse <  <(?=[/a-zA-Z>]) (?<!=)> regions
  # add-highlighter "shared/%arg{1}/jsx/expr" region -recurse \{ \{             \}      ref %arg{1}

  # add-highlighter "shared/%arg{1}/jsx/tag/base" default-region group
  # add-highlighter "shared/%arg{1}/jsx/tag/double_string" region =\K" (?<!\\)(\\\\)*" fill string
  # add-highlighter "shared/%arg{1}/jsx/tag/single_string" region =\K' (?<!\\)(\\\\)*' fill string
  # add-highlighter "shared/%arg{1}/jsx/tag/expr" region -recurse \{ \{   \}           group

  # add-highlighter "shared/%arg{1}/jsx/tag/base/" regex (\w+) 1:attribute
  # add-highlighter "shared/%arg{1}/jsx/tag/base/" regex </?([\w-$]+) 1:keyword
  # add-highlighter "shared/%arg{1}/jsx/tag/base/" regex (</?|/?>) 0:meta

  # add-highlighter "shared/%arg{1}/jsx/tag/expr/"   ref %arg{1}


  # Commands
  # ‾‾‾‾‾‾‾‾

  define-command -hidden rescript-trim-indent %{
      # remove trailing white spaces
      try %{ execute-keys -draft -itersel <a-x> s \h+$ <ret> d }
  }

  define-command -hidden rescript-indent-on-char %<
      evaluate-commands -draft -itersel %<
          # align closer token to its opener when alone on a line
          try %/ execute-keys -draft <a-h> <a-k> ^\h+[\]}]$ <ret> m s \A|.\z <ret> 1<a-&> /
      >
  >

  define-command -hidden rescript-indent-on-new-line %<
      evaluate-commands -draft -itersel %<
          # copy // comments prefix and following white spaces
          try %{ execute-keys -draft k <a-x> s ^\h*\K//\h* <ret> y gh j P }
          # preserve previous line indent
          try %{ execute-keys -draft <semicolon> K <a-&> }
          # filter previous line
          try %{ execute-keys -draft k : rescript-trim-indent <ret> }
          # indent after lines beginning / ending with opener token
          try %_ execute-keys -draft k <a-x> s [[({] <ret> <space> <a-l> <a-K> [\])}] <ret> j <a-gt> _
          # deindent closing token(s) when after cursor
          try %_ execute-keys -draft <a-x> <a-k> ^\h*[})\]] <ret> gh / [})\]] <ret> m <a-S> 1<a-&> _
      >
  >

§
