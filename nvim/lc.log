15:18:42 INFO main src/vim.rs:92 => None {"jsonrpc":"2.0","method":"eval","params":["[!!get(g:, 'LanguageClient_autoStart', 1), get(g:, 'LanguageClient_serverCommands', {}), get(g:, 'LanguageClient_selectionUI', v:null), get(g:, 'LanguageClient_trace', v:null), expand(get(g:, 'LanguageClient_settingsPath', '.vim/settings.json')), !!get(g:, 'LanguageClient_loadSettings', 1), get(g:, 'LanguageClient_rootMarkers', v:null), get(g:, 'LanguageClient_changeThrottle', v:null), get(g:, 'LanguageClient_waitOutputTimeout', v:null), !!get(g:, 'LanguageClient_diagnosticsEnable', 1), get(g:, 'LanguageClient_diagnosticsList', 'Quickfix'), get(g:, 'LanguageClient_diagnosticsDisplay', {}), get(g:, 'LanguageClient_windowLogMessageLevel', 'Warning'), get(g:, 'LanguageClient_hoverPreview', 'Auto'), get(g:, 'LanguageClient_completionPreferTextEdit', 0), has('nvim')]"],"id":4}
15:18:42 INFO reader-main src/vim.rs:380 <= None {"id": 4, "jsonrpc": "2.0", "result": [1, {"reason": ["ocaml-language-server", "--stdio"], "javascript.jsx": ["flow-language-server", "--stdio"], "typescript": ["javascript-typescript-stdio"], "haskell": ["hie-wrapper"], "elm": ["elm-language-server-exe"], "rust": ["rls"], "javascript": ["flow-language-server", "--stdio"], "ocaml": ["ocaml-language-server", "--stdio"], "typescript.jsx": ["javascript-typescript-stdio"]}, null, null, ".vim/settings.json", 1, {"reason": ["bs.config"], "haskell": ["stack.yaml"], "elm": ["elm.json"], "rust": ["Cargo.toml"], "javascript": ["package.json"], "ocaml": ["*.opam"]}, null, null, 1, "Quickfix", {}, "Warning", "Auto", 0, 1]}
15:18:42 INFO main src/vim.rs:92 => None {"jsonrpc":"2.0","method":"eval","params":["[get(g:, 'LanguageClient_diagnosticsSignsMax', v:null), get(g:, 'LanguageClient_documentHighlightDisplay', {})]"],"id":5}
15:18:42 INFO reader-main src/vim.rs:380 <= None {"id": 5, "jsonrpc": "2.0", "result": [null, {}]}
15:18:42 INFO main src/vim.rs:92 => None {"jsonrpc":"2.0","method":"eval","params":["get(g:, 'loaded_fzf')"],"id":6}
15:18:42 INFO reader-main src/vim.rs:380 <= None {"id": 6, "jsonrpc": "2.0", "result": 1}
15:18:42 DEBUG main src/vim.rs:320 state.serverCommands.typescript: null ==> ["javascript-typescript-stdio"]
15:18:42 DEBUG main src/vim.rs:320 state.trace: null ==> "off"
15:18:42 DEBUG main src/vim.rs:320 state.serverCommands.javascript.jsx: null ==> ["flow-language-server","--stdio"]
15:18:42 DEBUG main src/vim.rs:320 state.serverCommands.typescript.jsx: null ==> ["javascript-typescript-stdio"]
15:18:42 DEBUG main src/vim.rs:320 state.serverCommands.javascript: null ==> ["flow-language-server","--stdio"]
15:18:42 DEBUG main src/vim.rs:320 state.serverCommands.reason: null ==> ["ocaml-language-server","--stdio"]
15:18:42 DEBUG main src/vim.rs:320 state.is_nvim: false ==> true
15:18:42 DEBUG main src/vim.rs:320 state.loggingFile: null ==> "./lc.log"
15:18:42 DEBUG main src/vim.rs:320 state.serverCommands.elm: null ==> ["elm-language-server-exe"]
15:18:42 DEBUG main src/vim.rs:320 state.loggingLevel: "WARN" ==> "DEBUG"
15:18:42 DEBUG main src/vim.rs:320 state.loadSettings: false ==> true
15:18:42 DEBUG main src/vim.rs:320 state.serverCommands.rust: null ==> ["rls"]
15:18:42 DEBUG main src/vim.rs:320 state.serverCommands.ocaml: null ==> ["ocaml-language-server","--stdio"]
15:18:42 DEBUG main src/vim.rs:320 state.selectionUI: "LocationList" ==> "FZF"
15:18:42 DEBUG main src/vim.rs:320 state.serverCommands.haskell: null ==> ["hie-wrapper"]
15:18:42 DEBUG main src/vim.rs:320 state.rootMarkers: null ==> {"elm":["elm.json"],"haskell":["stack.yaml"],"javascript":["package.json"],"ocaml":["*.opam"],"reason":["bs.config"],"rust":["Cargo.toml"]}
15:18:42 WARN main src/languageclient.rs:2159 Failed to start language server automatically. No language server command found for file type: vim.
15:18:42 INFO main src/languageclient.rs:2164 End languageClient/handleBufReadPost
15:18:42 INFO reader-main src/vim.rs:380 <= None {"method": "languageClient/handleCursorMoved", "jsonrpc": "2.0", "params": {"languageId": "vim", "line": 0, "LSP#visible_line_start()": 0, "LSP#visible_line_end()": 48, "buftype": "", "filename": "/Users/jaredramirez/dev/src/github.com/jaredramirez/env/nvim/init.vim"}}
15:18:42 INFO main src/languageclient.rs:2221 Begin languageClient/handleCursorMoved
15:18:42 INFO main src/languageclient.rs:48 gather_args: [Buftype, Filename, Line] = [String(""), String("/Users/jaredramirez/dev/src/github.com/jaredramirez/env/nvim/init.vim"), Number(0)]
15:18:42 INFO main src/languageclient.rs:48 gather_args: ["LSP#visible_line_start()", "LSP#visible_line_end()"] = [Number(0), Number(48)]
15:18:42 INFO main src/languageclient.rs:2270 Updating signs: []
15:18:42 INFO main src/vim.rs:92 => None {"jsonrpc":"2.0","method":"execute","params":[],"id":7}
15:18:42 INFO reader-main src/vim.rs:380 <= None {"method": "languageClient/handleTextChanged", "jsonrpc": "2.0", "params": {"languageId": "vim", "buftype": "", "filename": "/Users/jaredramirez/dev/src/github.com/jaredramirez/env/nvim/init.vim"}}
15:18:42 INFO reader-main src/vim.rs:380 <= None {"id": 7, "jsonrpc": "2.0", "result": 0}
15:18:42 INFO main src/vim.rs:92 => None {"jsonrpc":"2.0","method":"nvim_buf_add_highlight","params":[0,0,"Error",1,1,1],"id":8}
15:18:42 INFO reader-main src/vim.rs:380 <= None {"id": 8, "jsonrpc": "2.0", "result": 1}
15:18:42 INFO main src/vim.rs:92 => None {"jsonrpc":"2.0","method":"nvim_buf_clear_highlight","params":[0,1,0,48]}
15:18:42 INFO main src/vim.rs:92 => None {"jsonrpc":"2.0","method":"s:AddHighlights","params":[1,[]]}
15:18:42 INFO main src/languageclient.rs:2313 End languageClient/handleCursorMoved
15:18:42 INFO main src/languageclient.rs:2169 Begin languageClient/handleTextChanged
15:18:42 INFO main src/languageclient.rs:48 gather_args: [Buftype, Filename] = [String(""), String("/Users/jaredramirez/dev/src/github.com/jaredramirez/env/nvim/init.vim")]
15:18:42 INFO main src/languageclient.rs:1755 Begin textDocument/didChange
15:18:42 INFO main src/languageclient.rs:48 gather_args: [Buftype, LanguageId, Filename] = [String(""), String("vim"), String("/Users/jaredramirez/dev/src/github.com/jaredramirez/env/nvim/init.vim")]
15:18:42 INFO main src/languageclient.rs:1764 Not opened yet. Switching to didOpen.
15:18:42 INFO main src/languageclient.rs:1706 Begin textDocument/didOpen
15:18:42 INFO main src/languageclient.rs:29 Some arguments are not available. Requesting from vim. Keys: ["text"]. Exps: ["LSP#text()"]
15:18:42 INFO main src/vim.rs:92 => None {"jsonrpc":"2.0","method":"eval","params":["[LSP#text()]"],"id":9}
15:18:42 INFO reader-main src/vim.rs:380 <= None {"id": 9, "jsonrpc": "2.0", "result": [["\" ------ PLUGINS ------", "", "if empty(glob('~/.config/nvim/autoload/plug.vim'))", "  silent !curl -fLo ~/.config/nvim/autoload/plug.vim --create-dirs", "    \\ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim", "  autocmd VimEnter * PlugInstall --sync | source ~/.config/nvim/init.vim", "endif", "", "call plug#begin('~/.config/nvim/bundle')", "", "\" Navigation", "Plug 'ctrlpvim/ctrlp.vim'", "Plug 'sjbach/lusty'", "Plug 'christoomey/vim-tmux-navigator' \" See README for tmux setup", "", "\" Code formatting", "\" For Prettier -> https://github.com/prettier/prettier", "Plug 'prettier/vim-prettier', {", "  \\ 'do': 'yarn install',", "  \\ 'for': ['javascript', 'typescript', 'css', 'less', 'scss', 'json', 'graphql', 'markdown', 'vue']", "\\ }", "\" For ReasonML formatting -> https://github.com/reasonml/reason-cli", "\" For Elm formatting -> https://github.com/avh4/elm-format", "\" For Rust formatting -> https://github.com/rust-lang-nursery/rustfmt", "\" For Haskell formatting -> http://hackage.haskell.org/package/hfmt", "Plug 'w0rp/ale'", "", "\" Completion - I mostly rely on language severs + ncm2 for completion", "Plug 'ncm2/ncm2'", "Plug 'roxma/nvim-yarp'", "Plug 'ncm2/ncm2-tmux'", "Plug 'ncm2/ncm2-path'", "Plug 'ncm2/ncm2-bufword'", "", "Plug 'ncm2/ncm2-syntax'", "Plug 'Shougo/neco-syntax'", "", "Plug 'ncm2/ncm2-vim'", "Plug 'Shougo/neco-vim'", "", "\" LanguageClient (Ties into ncm2)", "\" For Haskell langauge server -> https://github.com/haskell/haskell-ide-engine", "\" For Rust langauge server -> https://github.com/rust-lang-nursery/rls", "\" For Ocaml/Reason language server -> https://github.com/freebroccolo/ocaml-language-server", "\" For Flow(JS) language server -> https://github.com/flowtype/flow-language-server", "\" For Typescript language server -> https://github.com/sourcegraph/javascript-typescript-langserver", "Plug 'autozimu/LanguageClient-neovim', {", "    \\ 'branch': 'next',", "    \\ 'do': 'bash install.sh',", "    \\ }", "", "\" Fuzzy finder - also used in the language server complemention menu", "Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }", "", "\" Git", "Plug 'airblade/vim-gitgutter'", "", "\" Syntax highlighting", "Plug 'sheerun/vim-polyglot'", "Plug 'luochen1990/rainbow'", "Plug 'haishanh/night-owl.vim'", "Plug 'lambdatoast/elm.vim'", "", "\" Other syntax highlighting - for the (few) languages not supported by polyglot", "Plug 'reasonml-editor/vim-reason-plus', {", "  \\ 'for': ['reason']", "\\ }", "Plug 'milch/vim-fastlane'", "", "\" Status Bar", "Plug 'itchyny/lightline.vim'", "Plug 'vim-airline/vim-airline-themes'", "Plug 'Yggdroot/indentLine'", "Plug 'edkolev/tmuxline.vim'", "Plug 'ap/vim-buftabline'", "", "\" For Dash -> https://kapeli.com/dash", "Plug 'rizzatti/dash.vim'", "\" For Wakatime -> https://kapeli.com/dash", "Plug 'wakatime/vim-wakatime'", "\" For Ack -> https://beyondgrep.com/", "Plug 'mileszs/ack.vim'", "", "\" Code Commenter", "Plug 'scrooloose/nerdcommenter'", "", "\" Defaults", "Plug 'tpope/vim-sensible'", "Plug 'tpope/vim-surround'", "Plug 'easymotion/vim-easymotion'", "", "call plug#end()", "", "\" ------ GENERAL CONFIG ------", "", "\" Disable compatabliltiy with vi", "set nocompatible", "", "\" Hide buffer instead of abandoning when switching", "set hidden", "", "\" Set max line length for JS/TS", "autocmd BufRead,BufNewFile *.js,*jsx,*.ts,*.tsx setlocal colorcolumn=80", "", "\" Turn off spellcheck", "set nospell", "", "\" Show invisibles", "set list listchars=tab:··,trail:·,nbsp:·,eol:¬", "", "\" Enable syntax highlighting", "syntax enable", "", "\" Enable file specific behavior like syntax highlighting and indentation", "filetype on", "filetype plugin on", "filetype indent on", "", "\" Use system clipboard", "set clipboard=unnamed", "", "\" Disable toolbar", "set guioptions=F", "", "\" Search options", "set ignorecase", "set smartcase", "", "\" No sounds", "set visualbell", "set noerrorbells", "", "\" Set tabs", "set tabstop=2", "set shiftwidth=2", "set expandtab", "autocmd FileType elm,java setlocal tabstop=4 shiftwidth=4", "", "\" Color/Theme", "if (has(\"termguicolors\"))", " set termguicolors", "endif", "", "set background=dark", "colorscheme night-owl", "highlight PMenuSel guibg=#54738C ctermbg=66 gui=NONE cterm=NONE", "highlight Comment cterm=italic", "highlight clear Error", "", "\" Set view attributes", "set number", "set ruler", "set cursorline", "", "\" Make <Shift><K> inverse of <Shift><J>", "nnoremap K i<CR><Esc>", "", "\" Set Leader", "let mapleader=\"\\<SPACE>\"", "", "\" Disabled Ctrl-C", "inoremap <C-c> <Nop>", "", "\" Keep cursor in the center of the screen", "set scrolloff=999", "", "", "\" ------ PLUGIN CONFIG ------", "", "\" Configure Ctrl-P", "", "\" Open Ctrl-P", "nnoremap <Leader>o :CtrlP<CR>", "\" Open Ctrl-P buffer", "nnoremap <Leader>b :CtrlPBuffer<CR>", "\" Ctrl-P ignores", "set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*/node_modules/*,*/deps/*,*/_build/*,*/dist/*,*/build/*,*/legacy/*,*/elm-stuff/*", "", "\" Configure vim-polygot", "let g:polyglot_disabled = ['reason', 'elm']", "", "\" Configure rainbow", "let g:rainbow_active = 1", "let g:rainbow_conf = {", "  \\ 'guifgs': ['#5FD7FF', '#FFFFAF', '#AFFFFF', '#FFD7FF'],", "  \\ 'ctermfgs': ['51', '229', '159', '225'],", "\\}", "", "\" Configure vim-prettier", "", "\" Make Prettier async", "let g:prettier#exec_cmd_async = 1", "\" Disable quickfix", "let g:prettier#quickfix_enabled = 0", "\" Make Prettier run on filesave", "autocmd BufWritePre *.js,*.jsx,*.mjs,*.ts,*.tsx,*.css,*.less,*.scss,*.json,*.graphql,*.md,*.vue PrettierAsync", "", "\" Set prettier back to defaults (vim-prettier has differnt defaults)", "let g:prettier#config#single_quote = 'false'", "let g:prettier#config#bracket_spacing = 'true'", "let g:prettier#config#jsx_bracket_same_line = 'false'", "let g:prettier#config#arrow_parens = 'avoid'", "let g:prettier#config#trailing_comma = 'none'", "let g:prettier#config#parser = 'babylon'", "", "\" Configure NERD Commenter", "let g:NERDSpaceDelims = 1", "", "\" Configure lightline", "set noshowmode", "let g:lightline = {", "  \\ 'colorscheme': 'seoul256',", "  \\ 'separator': { 'left': '', 'right': '' },", "  \\ 'subseparator': { 'left': '', 'right': '' },", "  \\ }", "", "\" Configure buftabline", "let g:buftabline_indicators = 1", "highlight BufTabLineFill guifg=#30302C ctermfg=58 guibg=#30302C ctermbg=58", "highlight BufTabLineHidden guifg=NONE ctermfg=NONE guibg=NONE ctermbg=NONE", "highlight BufTabLineCurrent guibg=#4E4E43 ctermbg=59", "highlight BufTabLineHidden guibg=#30302C ctermbg=58", "", "\" Configure tmuxline", "autocmd VimEnter * Tmuxline", "let g:tmuxline_preset = 'powerline'", "let g:tmuxline_theme = 'lightline'", "", "\" Configure Ale", "let g:ale_fix_on_save = 1", "", "\" Error Display", "highlight ALEError guifg=#ff5874 ctermfg=204 guibg=NONE ctermbg=NONE", "highlight ALEErrorSign guifg=#ff5874 ctermfg=204 guibg=NONE ctermbg=NONE", "highlight ALEWarning guifg=ffd17c ctermfg=222 guibg=NONE ctermbg=NONE", "highlight ALEWarningSign guifg=#ffd17c ctermfg=222 guibg=NONE ctermbg=NONE", "let g:ale_sign_error = '✖'", "let g:ale_sign_warning = '⚠'", "let g:ale_sign_column_always = 1", "", "\" Configure auto-formatters", "let g:ale_fixers = {", "\\   '*': ['remove_trailing_lines', 'trim_whitespace'],", "\\   'reason': ['refmt'],", "\\   'elm': ['elm-format'],", "\\   'rust': ['rustfmt'],", "\\   'haskell': ['hfmt']", "\\}", "", "", "\" Disable Ale linters for language that there is a language server for", "\" Langauge servers provide a much better experience, and while Ale + LS can be", "\" used together, I prefer to disable Ale", "let g:ale_linters = {", "\\   'reason': [],", "\\   'ocaml': [],", "\\   'haskell': [],", "\\   'rust': [],", "\\   'javascript': [],", "\\   'typescript': []", "\\   'elm': []", "\\}", "", "\" Configure indentLine", "let g:indentLine_char = '|'", "", "\" Configure ncm2", "autocmd BufEnter * call ncm2#enable_for_buffer()", "set completeopt=noinsert,menuone,noselect", "", "set shortmess+=c", "inoremap <expr> <CR> (pumvisible() ? \"\\<c-y>\\<cr>\" : \"\\<CR>\")", "inoremap <expr> <Tab> pumvisible() ? \"\\<C-n>\" : \"\\<Tab>\"", "inoremap <expr> <S-Tab> pumvisible() ? \"\\<C-p>\" : \"\\<S-Tab>\"", "", "\" Configure LanguageClient", "", "\" This is required for LanguageClient, but is already set above", "\" set hidden", "", "\" Always show sign column", "set signcolumn=yes", "", "\" Configure each filetype & language server to go with it", "\" For Haskell langauge server -> https://github.com/haskell/haskell-ide-engine", "\" For Rust langauge server -> https://github.com/rust-lang-nursery/rls", "\" For Ocamel/Reason language server -> https://github.com/freebroccolo/ocaml-language-server<Paste>", "\" For Flow(JS) language server -> https://github.com/flowtype/flow-language-server", "\" For Typescript language server -> https://github.com/sourcegraph/javascript-typescript-langserver", "let g:LanguageClient_serverCommands = {", "    \\ 'elm': ['elm-language-server-exe'],", "    \\ 'reason': ['ocaml-language-server', '--stdio'],", "    \\ 'ocaml': ['ocaml-language-server', '--stdio'],", "    \\ 'javascript': ['flow-language-server', '--stdio'],", "    \\ 'javascript.jsx': ['flow-language-server', '--stdio'],", "    \\ 'haskell': ['hie-wrapper'],", "    \\ 'rust': ['rls'],", "    \\ 'typescript': ['javascript-typescript-stdio'],", "    \\ 'typescript.jsx': ['javascript-typescript-stdio'],", "    \\ }", "let g:LanguageClient_rootMarkers = {", "    \\ 'elm': ['elm.json'],", "    \\ 'javascript': ['package.json'],", "    \\ 'reason': ['bs.config'],", "    \\ 'ocaml': ['*.opam'],", "    \\ 'haskell': ['stack.yaml'],", "    \\ 'rust': ['Cargo.toml'],", "    \\ }", "", "let g:LanguageClient_loggingFile = './lc.log'", "let g:LanguageClient_loggingLevel = 'DEBUG'", "", "\" javascript-typescript-stdio language server does work with flow", "\" https://github.com/sourcegraph/javascript-typescript-langserver/issues/390", "", "\" Mappings for interacting with langauge server", "nnoremap <F5> :call LanguageClient_contextMenu()<CR>", "map <Leader>llh :call LanguageClient#textDocument_hover()<CR>", "map <Leader>llg :call LanguageClient#textDocument_definition()<CR>", "map <Leader>llr :call LanguageClient#textDocument_rename()<CR>", "map <Leader>llf :call LanguageClient#textDocument_formatting()<CR>", "map <Leader>llb :call LanguageClient#textDocument_references()<CR>", "map <Leader>lla :call LanguageClient#textDocument_codeAction()<CR>", "map <Leader>lls :call LanguageClient#textDocument_documentSymbol()<CR>", "", "\" Configure vim-poloygot", "let g:javascript_plugin_flow = 1", "", "\" Configure Dash", "nmap <silent> <leader>s <Plug>DashSearch", ""]]}
15:18:42 INFO main src/languageclient.rs:48 gather_args: [Buftype, LanguageId, Filename, Text] = [String(""), String("vim"), String("/Users/jaredramirez/dev/src/github.com/jaredramirez/env/nvim/init.vim"), Array([String("\" ------ PLUGINS ------"), String(""), String("if empty(glob(\'~/.config/nvim/autoload/plug.vim\'))"), String("  silent !curl -fLo ~/.config/nvim/autoload/plug.vim --create-dirs"), String("    \\ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim"), String("  autocmd VimEnter * PlugInstall --sync | source ~/.config/nvim/init.vim"), String("endif"), String(""), String("call plug#begin(\'~/.config/nvim/bundle\')"), String(""), String("\" Navigation"), String("Plug \'ctrlpvim/ctrlp.vim\'"), String("Plug \'sjbach/lusty\'"), String("Plug \'christoomey/vim-tmux-navigator\' \" See README for tmux setup"), String(""), String("\" Code formatting"), String("\" For Prettier -> https://github.com/prettier/prettier"), String("Plug \'prettier/vim-prettier\', {"), String("  \\ \'do\': \'yarn install\',"), String("  \\ \'for\': [\'javascript\', \'typescript\', \'css\', \'less\', \'scss\', \'json\', \'graphql\', \'markdown\', \'vue\']"), String("\\ }"), String("\" For ReasonML formatting -> https://github.com/reasonml/reason-cli"), String("\" For Elm formatting -> https://github.com/avh4/elm-format"), String("\" For Rust formatting -> https://github.com/rust-lang-nursery/rustfmt"), String("\" For Haskell formatting -> http://hackage.haskell.org/package/hfmt"), String("Plug \'w0rp/ale\'"), String(""), String("\" Completion - I mostly rely on language severs + ncm2 for completion"), String("Plug \'ncm2/ncm2\'"), String("Plug \'roxma/nvim-yarp\'"), String("Plug \'ncm2/ncm2-tmux\'"), String("Plug \'ncm2/ncm2-path\'"), String("Plug \'ncm2/ncm2-bufword\'"), String(""), String("Plug \'ncm2/ncm2-syntax\'"), String("Plug \'Shougo/neco-syntax\'"), String(""), String("Plug \'ncm2/ncm2-vim\'"), String("Plug \'Shougo/neco-vim\'"), String(""), String("\" LanguageClient (Ties into ncm2)"), String("\" For Haskell langauge server -> https://github.com/haskell/haskell-ide-engine"), String("\" For Rust langauge server -> https://github.com/rust-lang-nursery/rls"), String("\" For Ocaml/Reason language server -> https://github.com/freebroccolo/ocaml-language-server"), String("\" For Flow(JS) language server -> https://github.com/flowtype/flow-language-server"), String("\" For Typescript language server -> https://github.com/sourcegraph/javascript-typescript-langserver"), String("Plug \'autozimu/LanguageClient-neovim\', {"), String("    \\ \'branch\': \'next\',"), String("    \\ \'do\': \'bash install.sh\',"), String("    \\ }"), String(""), String("\" Fuzzy finder - also used in the language server complemention menu"), String("Plug \'junegunn/fzf\', { \'dir\': \'~/.fzf\', \'do\': \'./install --all\' }"), String(""), String("\" Git"), String("Plug \'airblade/vim-gitgutter\'"), String(""), String("\" Syntax highlighting"), String("Plug \'sheerun/vim-polyglot\'"), String("Plug \'luochen1990/rainbow\'"), String("Plug \'haishanh/night-owl.vim\'"), String("Plug \'lambdatoast/elm.vim\'"), String(""), String("\" Other syntax highlighting - for the (few) languages not supported by polyglot"), String("Plug \'reasonml-editor/vim-reason-plus\', {"), String("  \\ \'for\': [\'reason\']"), String("\\ }"), String("Plug \'milch/vim-fastlane\'"), String(""), String("\" Status Bar"), String("Plug \'itchyny/lightline.vim\'"), String("Plug \'vim-airline/vim-airline-themes\'"), String("Plug \'Yggdroot/indentLine\'"), String("Plug \'edkolev/tmuxline.vim\'"), String("Plug \'ap/vim-buftabline\'"), String(""), String("\" For Dash -> https://kapeli.com/dash"), String("Plug \'rizzatti/dash.vim\'"), String("\" For Wakatime -> https://kapeli.com/dash"), String("Plug \'wakatime/vim-wakatime\'"), String("\" For Ack -> https://beyondgrep.com/"), String("Plug \'mileszs/ack.vim\'"), String(""), String("\" Code Commenter"), String("Plug \'scrooloose/nerdcommenter\'"), String(""), String("\" Defaults"), String("Plug \'tpope/vim-sensible\'"), String("Plug \'tpope/vim-surround\'"), String("Plug \'easymotion/vim-easymotion\'"), String(""), String("call plug#end()"), String(""), String("\" ------ GENERAL CONFIG ------"), String(""), String("\" Disable compatabliltiy with vi"), String("set nocompatible"), String(""), String("\" Hide buffer instead of abandoning when switching"), String("set hidden"), String(""), String("\" Set max line length for JS/TS"), String("autocmd BufRead,BufNewFile *.js,*jsx,*.ts,*.tsx setlocal colorcolumn=80"), String(""), String("\" Turn off spellcheck"), String("set nospell"), String(""), String("\" Show invisibles"), String("set list listchars=tab:··,trail:·,nbsp:·,eol:¬"), String(""), String("\" Enable syntax highlighting"), String("syntax enable"), String(""), String("\" Enable file specific behavior like syntax highlighting and indentation"), String("filetype on"), String("filetype plugin on"), String("filetype indent on"), String(""), String("\" Use system clipboard"), String("set clipboard=unnamed"), String(""), String("\" Disable toolbar"), String("set guioptions=F"), String(""), String("\" Search options"), String("set ignorecase"), String("set smartcase"), String(""), String("\" No sounds"), String("set visualbell"), String("set noerrorbells"), String(""), String("\" Set tabs"), String("set tabstop=2"), String("set shiftwidth=2"), String("set expandtab"), String("autocmd FileType elm,java setlocal tabstop=4 shiftwidth=4"), String(""), String("\" Color/Theme"), String("if (has(\"termguicolors\"))"), String(" set termguicolors"), String("endif"), String(""), String("set background=dark"), String("colorscheme night-owl"), String("highlight PMenuSel guibg=#54738C ctermbg=66 gui=NONE cterm=NONE"), String("highlight Comment cterm=italic"), String("highlight clear Error"), String(""), String("\" Set view attributes"), String("set number"), String("set ruler"), String("set cursorline"), String(""), String("\" Make <Shift><K> inverse of <Shift><J>"), String("nnoremap K i<CR><Esc>"), String(""), String("\" Set Leader"), String("let mapleader=\"\\<SPACE>\""), String(""), String("\" Disabled Ctrl-C"), String("inoremap <C-c> <Nop>"), String(""), String("\" Keep cursor in the center of the screen"), String("set scrolloff=999"), String(""), String(""), String("\" ------ PLUGIN CONFIG ------"), String(""), String("\" Configure Ctrl-P"), String(""), String("\" Open Ctrl-P"), String("nnoremap <Leader>o :CtrlP<CR>"), String("\" Open Ctrl-P buffer"), String("nnoremap <Leader>b :CtrlPBuffer<CR>"), String("\" Ctrl-P ignores"), String("set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*/node_modules/*,*/deps/*,*/_build/*,*/dist/*,*/build/*,*/legacy/*,*/elm-stuff/*"), String(""), String("\" Configure vim-polygot"), String("let g:polyglot_disabled = [\'reason\', \'elm\']"), String(""), String("\" Configure rainbow"), String("let g:rainbow_active = 1"), String("let g:rainbow_conf = {"), String("  \\ \'guifgs\': [\'#5FD7FF\', \'#FFFFAF\', \'#AFFFFF\', \'#FFD7FF\'],"), String("  \\ \'ctermfgs\': [\'51\', \'229\', \'159\', \'225\'],"), String("\\}"), String(""), String("\" Configure vim-prettier"), String(""), String("\" Make Prettier async"), String("let g:prettier#exec_cmd_async = 1"), String("\" Disable quickfix"), String("let g:prettier#quickfix_enabled = 0"), String("\" Make Prettier run on filesave"), String("autocmd BufWritePre *.js,*.jsx,*.mjs,*.ts,*.tsx,*.css,*.less,*.scss,*.json,*.graphql,*.md,*.vue PrettierAsync"), String(""), String("\" Set prettier back to defaults (vim-prettier has differnt defaults)"), String("let g:prettier#config#single_quote = \'false\'"), String("let g:prettier#config#bracket_spacing = \'true\'"), String("let g:prettier#config#jsx_bracket_same_line = \'false\'"), String("let g:prettier#config#arrow_parens = \'avoid\'"), String("let g:prettier#config#trailing_comma = \'none\'"), String("let g:prettier#config#parser = \'babylon\'"), String(""), String("\" Configure NERD Commenter"), String("let g:NERDSpaceDelims = 1"), String(""), String("\" Configure lightline"), String("set noshowmode"), String("let g:lightline = {"), String("  \\ \'colorscheme\': \'seoul256\',"), String("  \\ \'separator\': { \'left\': \'\u{e0b0}\', \'right\': \'\u{e0b2}\' },"), String("  \\ \'subseparator\': { \'left\': \'\u{e0b1}\', \'right\': \'\u{e0b3}\' },"), String("  \\ }"), String(""), String("\" Configure buftabline"), String("let g:buftabline_indicators = 1"), String("highlight BufTabLineFill guifg=#30302C ctermfg=58 guibg=#30302C ctermbg=58"), String("highlight BufTabLineHidden guifg=NONE ctermfg=NONE guibg=NONE ctermbg=NONE"), String("highlight BufTabLineCurrent guibg=#4E4E43 ctermbg=59"), String("highlight BufTabLineHidden guibg=#30302C ctermbg=58"), String(""), String("\" Configure tmuxline"), String("autocmd VimEnter * Tmuxline"), String("let g:tmuxline_preset = \'powerline\'"), String("let g:tmuxline_theme = \'lightline\'"), String(""), String("\" Configure Ale"), String("let g:ale_fix_on_save = 1"), String(""), String("\" Error Display"), String("highlight ALEError guifg=#ff5874 ctermfg=204 guibg=NONE ctermbg=NONE"), String("highlight ALEErrorSign guifg=#ff5874 ctermfg=204 guibg=NONE ctermbg=NONE"), String("highlight ALEWarning guifg=ffd17c ctermfg=222 guibg=NONE ctermbg=NONE"), String("highlight ALEWarningSign guifg=#ffd17c ctermfg=222 guibg=NONE ctermbg=NONE"), String("let g:ale_sign_error = \'✖\'"), String("let g:ale_sign_warning = \'⚠\'"), String("let g:ale_sign_column_always = 1"), String(""), String("\" Configure auto-formatters"), String("let g:ale_fixers = {"), String("\\   \'*\': [\'remove_trailing_lines\', \'trim_whitespace\'],"), String("\\   \'reason\': [\'refmt\'],"), String("\\   \'elm\': [\'elm-format\'],"), String("\\   \'rust\': [\'rustfmt\'],"), String("\\   \'haskell\': [\'hfmt\']"), String("\\}"), String(""), String(""), String("\" Disable Ale linters for language that there is a language server for"), String("\" Langauge servers provide a much better experience, and while Ale + LS can be"), String("\" used together, I prefer to disable Ale"), String("let g:ale_linters = {"), String("\\   \'reason\': [],"), String("\\   \'ocaml\': [],"), String("\\   \'haskell\': [],"), String("\\   \'rust\': [],"), String("\\   \'javascript\': [],"), String("\\   \'typescript\': []"), String("\\   \'elm\': []"), String("\\}"), String(""), String("\" Configure indentLine"), String("let g:indentLine_char = \'|\'"), String(""), String("\" Configure ncm2"), String("autocmd BufEnter * call ncm2#enable_for_buffer()"), String("set completeopt=noinsert,menuone,noselect"), String(""), String("set shortmess+=c"), String("inoremap <expr> <CR> (pumvisible() ? \"\\<c-y>\\<cr>\" : \"\\<CR>\")"), String("inoremap <expr> <Tab> pumvisible() ? \"\\<C-n>\" : \"\\<Tab>\""), String("inoremap <expr> <S-Tab> pumvisible() ? \"\\<C-p>\" : \"\\<S-Tab>\""), String(""), String("\" Configure LanguageClient"), String(""), String("\" This is required for LanguageClient, but is already set above"), String("\" set hidden"), String(""), String("\" Always show sign column"), String("set signcolumn=yes"), String(""), String("\" Configure each filetype & language server to go with it"), String("\" For Haskell langauge server -> https://github.com/haskell/haskell-ide-engine"), String("\" For Rust langauge server -> https://github.com/rust-lang-nursery/rls"), String("\" For Ocamel/Reason language server -> https://github.com/freebroccolo/ocaml-language-server<Paste>"), String("\" For Flow(JS) language server -> https://github.com/flowtype/flow-language-server"), String("\" For Typescript language server -> https://github.com/sourcegraph/javascript-typescript-langserver"), String("let g:LanguageClient_serverCommands = {"), String("    \\ \'elm\': [\'elm-language-server-exe\'],"), String("    \\ \'reason\': [\'ocaml-language-server\', \'--stdio\'],"), String("    \\ \'ocaml\': [\'ocaml-language-server\', \'--stdio\'],"), String("    \\ \'javascript\': [\'flow-language-server\', \'--stdio\'],"), String("    \\ \'javascript.jsx\': [\'flow-language-server\', \'--stdio\'],"), String("    \\ \'haskell\': [\'hie-wrapper\'],"), String("    \\ \'rust\': [\'rls\'],"), String("    \\ \'typescript\': [\'javascript-typescript-stdio\'],"), String("    \\ \'typescript.jsx\': [\'javascript-typescript-stdio\'],"), String("    \\ }"), String("let g:LanguageClient_rootMarkers = {"), String("    \\ \'elm\': [\'elm.json\'],"), String("    \\ \'javascript\': [\'package.json\'],"), String("    \\ \'reason\': [\'bs.config\'],"), String("    \\ \'ocaml\': [\'*.opam\'],"), String("    \\ \'haskell\': [\'stack.yaml\'],"), String("    \\ \'rust\': [\'Cargo.toml\'],"), String("    \\ }"), String(""), String("let g:LanguageClient_loggingFile = \'./lc.log\'"), String("let g:LanguageClient_loggingLevel = \'DEBUG\'"), String(""), String("\" javascript-typescript-stdio language server does work with flow"), String("\" https://github.com/sourcegraph/javascript-typescript-langserver/issues/390"), String(""), String("\" Mappings for interacting with langauge server"), String("nnoremap <F5> :call LanguageClient_contextMenu()<CR>"), String("map <Leader>llh :call LanguageClient#textDocument_hover()<CR>"), String("map <Leader>llg :call LanguageClient#textDocument_definition()<CR>"), String("map <Leader>llr :call LanguageClient#textDocument_rename()<CR>"), String("map <Leader>llf :call LanguageClient#textDocument_formatting()<CR>"), String("map <Leader>llb :call LanguageClient#textDocument_references()<CR>"), String("map <Leader>lla :call LanguageClient#textDocument_codeAction()<CR>"), String("map <Leader>lls :call LanguageClient#textDocument_documentSymbol()<CR>"), String(""), String("\" Configure vim-poloygot"), String("let g:javascript_plugin_flow = 1"), String(""), String("\" Configure Dash"), String("nmap <silent> <leader>s <Plug>DashSearch"), String("")])]
15:18:42 DEBUG main src/vim.rs:320 state.text_documents./Users/jaredramirez/dev/src/github.com/jaredramirez/env/nvim/init.vim: null ==> {"languageId":"vim","text":"\" ------ PLUGINS ------\n\nif empty(glob('~/.config/nvim/autoload/plug.vim'))\n  silent !curl -fLo ~/.config/nvim/autoload/plug.vim --create-dirs\n    \\ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim\n  autocmd VimEnter * PlugInstall --sync | source ~/.config/nvim/init.vim\nendif\n\ncall plug#begin('~/.config/nvim/bundle')\n\n\" Navigation\nPlug 'ctrlpvim/ctrlp.vim'\nPlug 'sjbach/lusty'\nPlug 'christoomey/vim-tmux-navigator' \" See README for tmux setup\n\n\" Code formatting\n\" For Prettier -> https://github.com/prettier/prettier\nPlug 'prettier/vim-prettier', {\n  \\ 'do': 'yarn install',\n  \\ 'for': ['javascript', 'typescript', 'css', 'less', 'scss', 'json', 'graphql', 'markdown', 'vue']\n\\ }\n\" For ReasonML formatting -> https://github.com/reasonml/reason-cli\n\" For Elm formatting -> https://github.com/avh4/elm-format\n\" For Rust formatting -> https://github.com/rust-lang-nursery/rustfmt\n\" For Haskell formatting -> http://hackage.haskell.org/package/hfmt\nPlug 'w0rp/ale'\n\n\" Completion - I mostly rely on language severs + ncm2 for completion\nPlug 'ncm2/ncm2'\nPlug 'roxma/nvim-yarp'\nPlug 'ncm2/ncm2-tmux'\nPlug 'ncm2/ncm2-path'\nPlug 'ncm2/ncm2-bufword'\n\nPlug 'ncm2/ncm2-syntax'\nPlug 'Shougo/neco-syntax'\n\nPlug 'ncm2/ncm2-vim'\nPlug 'Shougo/neco-vim'\n\n\" LanguageClient (Ties into ncm2)\n\" For Haskell langauge server -> https://github.com/haskell/haskell-ide-engine\n\" For Rust langauge server -> https://github.com/rust-lang-nursery/rls\n\" For Ocaml/Reason language server -> https://github.com/freebroccolo/ocaml-language-server\n\" For Flow(JS) language server -> https://github.com/flowtype/flow-language-server\n\" For Typescript language server -> https://github.com/sourcegraph/javascript-typescript-langserver\nPlug 'autozimu/LanguageClient-neovim', {\n    \\ 'branch': 'next',\n    \\ 'do': 'bash install.sh',\n    \\ }\n\n\" Fuzzy finder - also used in the language server complemention menu\nPlug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }\n\n\" Git\nPlug 'airblade/vim-gitgutter'\n\n\" Syntax highlighting\nPlug 'sheerun/vim-polyglot'\nPlug 'luochen1990/rainbow'\nPlug 'haishanh/night-owl.vim'\nPlug 'lambdatoast/elm.vim'\n\n\" Other syntax highlighting - for the (few) languages not supported by polyglot\nPlug 'reasonml-editor/vim-reason-plus', {\n  \\ 'for': ['reason']\n\\ }\nPlug 'milch/vim-fastlane'\n\n\" Status Bar\nPlug 'itchyny/lightline.vim'\nPlug 'vim-airline/vim-airline-themes'\nPlug 'Yggdroot/indentLine'\nPlug 'edkolev/tmuxline.vim'\nPlug 'ap/vim-buftabline'\n\n\" For Dash -> https://kapeli.com/dash\nPlug 'rizzatti/dash.vim'\n\" For Wakatime -> https://kapeli.com/dash\nPlug 'wakatime/vim-wakatime'\n\" For Ack -> https://beyondgrep.com/\nPlug 'mileszs/ack.vim'\n\n\" Code Commenter\nPlug 'scrooloose/nerdcommenter'\n\n\" Defaults\nPlug 'tpope/vim-sensible'\nPlug 'tpope/vim-surround'\nPlug 'easymotion/vim-easymotion'\n\ncall plug#end()\n\n\" ------ GENERAL CONFIG ------\n\n\" Disable compatabliltiy with vi\nset nocompatible\n\n\" Hide buffer instead of abandoning when switching\nset hidden\n\n\" Set max line length for JS/TS\nautocmd BufRead,BufNewFile *.js,*jsx,*.ts,*.tsx setlocal colorcolumn=80\n\n\" Turn off spellcheck\nset nospell\n\n\" Show invisibles\nset list listchars=tab:··,trail:·,nbsp:·,eol:¬\n\n\" Enable syntax highlighting\nsyntax enable\n\n\" Enable file specific behavior like syntax highlighting and indentation\nfiletype on\nfiletype plugin on\nfiletype indent on\n\n\" Use system clipboard\nset clipboard=unnamed\n\n\" Disable toolbar\nset guioptions=F\n\n\" Search options\nset ignorecase\nset smartcase\n\n\" No sounds\nset visualbell\nset noerrorbells\n\n\" Set tabs\nset tabstop=2\nset shiftwidth=2\nset expandtab\nautocmd FileType elm,java setlocal tabstop=4 shiftwidth=4\n\n\" Color/Theme\nif (has(\"termguicolors\"))\n set termguicolors\nendif\n\nset background=dark\ncolorscheme night-owl\nhighlight PMenuSel guibg=#54738C ctermbg=66 gui=NONE cterm=NONE\nhighlight Comment cterm=italic\nhighlight clear Error\n\n\" Set view attributes\nset number\nset ruler\nset cursorline\n\n\" Make <Shift><K> inverse of <Shift><J>\nnnoremap K i<CR><Esc>\n\n\" Set Leader\nlet mapleader=\"\\<SPACE>\"\n\n\" Disabled Ctrl-C\ninoremap <C-c> <Nop>\n\n\" Keep cursor in the center of the screen\nset scrolloff=999\n\n\n\" ------ PLUGIN CONFIG ------\n\n\" Configure Ctrl-P\n\n\" Open Ctrl-P\nnnoremap <Leader>o :CtrlP<CR>\n\" Open Ctrl-P buffer\nnnoremap <Leader>b :CtrlPBuffer<CR>\n\" Ctrl-P ignores\nset wildignore+=*/tmp/*,*.so,*.swp,*.zip,*/node_modules/*,*/deps/*,*/_build/*,*/dist/*,*/build/*,*/legacy/*,*/elm-stuff/*\n\n\" Configure vim-polygot\nlet g:polyglot_disabled = ['reason', 'elm']\n\n\" Configure rainbow\nlet g:rainbow_active = 1\nlet g:rainbow_conf = {\n  \\ 'guifgs': ['#5FD7FF', '#FFFFAF', '#AFFFFF', '#FFD7FF'],\n  \\ 'ctermfgs': ['51', '229', '159', '225'],\n\\}\n\n\" Configure vim-prettier\n\n\" Make Prettier async\nlet g:prettier#exec_cmd_async = 1\n\" Disable quickfix\nlet g:prettier#quickfix_enabled = 0\n\" Make Prettier run on filesave\nautocmd BufWritePre *.js,*.jsx,*.mjs,*.ts,*.tsx,*.css,*.less,*.scss,*.json,*.graphql,*.md,*.vue PrettierAsync\n\n\" Set prettier back to defaults (vim-prettier has differnt defaults)\nlet g:prettier#config#single_quote = 'false'\nlet g:prettier#config#bracket_spacing = 'true'\nlet g:prettier#config#jsx_bracket_same_line = 'false'\nlet g:prettier#config#arrow_parens = 'avoid'\nlet g:prettier#config#trailing_comma = 'none'\nlet g:prettier#config#parser = 'babylon'\n\n\" Configure NERD Commenter\nlet g:NERDSpaceDelims = 1\n\n\" Configure lightline\nset noshowmode\nlet g:lightline = {\n  \\ 'colorscheme': 'seoul256',\n  \\ 'separator': { 'left': '', 'right': '' },\n  \\ 'subseparator': { 'left': '', 'right': '' },\n  \\ }\n\n\" Configure buftabline\nlet g:buftabline_indicators = 1\nhighlight BufTabLineFill guifg=#30302C ctermfg=58 guibg=#30302C ctermbg=58\nhighlight BufTabLineHidden guifg=NONE ctermfg=NONE guibg=NONE ctermbg=NONE\nhighlight BufTabLineCurrent guibg=#4E4E43 ctermbg=59\nhighlight BufTabLineHidden guibg=#30302C ctermbg=58\n\n\" Configure tmuxline\nautocmd VimEnter * Tmuxline\nlet g:tmuxline_preset = 'powerline'\nlet g:tmuxline_theme = 'lightline'\n\n\" Configure Ale\nlet g:ale_fix_on_save = 1\n\n\" Error Display\nhighlight ALEError guifg=#ff5874 ctermfg=204 guibg=NONE ctermbg=NONE\nhighlight ALEErrorSign guifg=#ff5874 ctermfg=204 guibg=NONE ctermbg=NONE\nhighlight ALEWarning guifg=ffd17c ctermfg=222 guibg=NONE ctermbg=NONE\nhighlight ALEWarningSign guifg=#ffd17c ctermfg=222 guibg=NONE ctermbg=NONE\nlet g:ale_sign_error = '✖'\nlet g:ale_sign_warning = '⚠'\nlet g:ale_sign_column_always = 1\n\n\" Configure auto-formatters\nlet g:ale_fixers = {\n\\   '*': ['remove_trailing_lines', 'trim_whitespace'],\n\\   'reason': ['refmt'],\n\\   'elm': ['elm-format'],\n\\   'rust': ['rustfmt'],\n\\   'haskell': ['hfmt']\n\\}\n\n\n\" Disable Ale linters for language that there is a language server for\n\" Langauge servers provide a much better experience, and while Ale + LS can be\n\" used together, I prefer to disable Ale\nlet g:ale_linters = {\n\\   'reason': [],\n\\   'ocaml': [],\n\\   'haskell': [],\n\\   'rust': [],\n\\   'javascript': [],\n\\   'typescript': []\n\\   'elm': []\n\\}\n\n\" Configure indentLine\nlet g:indentLine_char = '|'\n\n\" Configure ncm2\nautocmd BufEnter * call ncm2#enable_for_buffer()\nset completeopt=noinsert,menuone,noselect\n\nset shortmess+=c\ninoremap <expr> <CR> (pumvisible() ? \"\\<c-y>\\<cr>\" : \"\\<CR>\")\ninoremap <expr> <Tab> pumvisible() ? \"\\<C-n>\" : \"\\<Tab>\"\ninoremap <expr> <S-Tab> pumvisible() ? \"\\<C-p>\" : \"\\<S-Tab>\"\n\n\" Configure LanguageClient\n\n\" This is required for LanguageClient, but is already set above\n\" set hidden\n\n\" Always show sign column\nset signcolumn=yes\n\n\" Configure each filetype & language server to go with it\n\" For Haskell langauge server -> https://github.com/haskell/haskell-ide-engine\n\" For Rust langauge server -> https://github.com/rust-lang-nursery/rls\n\" For Ocamel/Reason language server -> https://github.com/freebroccolo/ocaml-language-server<Paste>\n\" For Flow(JS) language server -> https://github.com/flowtype/flow-language-server\n\" For Typescript language server -> https://github.com/sourcegraph/javascript-typescript-langserver\nlet g:LanguageClient_serverCommands = {\n    \\ 'elm': ['elm-language-server-exe'],\n    \\ 'reason': ['ocaml-language-server', '--stdio'],\n    \\ 'ocaml': ['ocaml-language-server', '--stdio'],\n    \\ 'javascript': ['flow-language-server', '--stdio'],\n    \\ 'javascript.jsx': ['flow-language-server', '--stdio'],\n    \\ 'haskell': ['hie-wrapper'],\n    \\ 'rust': ['rls'],\n    \\ 'typescript': ['javascript-typescript-stdio'],\n    \\ 'typescript.jsx': ['javascript-typescript-stdio'],\n    \\ }\nlet g:LanguageClient_rootMarkers = {\n    \\ 'elm': ['elm.json'],\n    \\ 'javascript': ['package.json'],\n    \\ 'reason': ['bs.config'],\n    \\ 'ocaml': ['*.opam'],\n    \\ 'haskell': ['stack.yaml'],\n    \\ 'rust': ['Cargo.toml'],\n    \\ }\n\nlet g:LanguageClient_loggingFile = './lc.log'\nlet g:LanguageClient_loggingLevel = 'DEBUG'\n\n\" javascript-typescript-stdio language server does work with flow\n\" https://github.com/sourcegraph/javascript-typescript-langserver/issues/390\n\n\" Mappings for interacting with langauge server\nnnoremap <F5> :call LanguageClient_contextMenu()<CR>\nmap <Leader>llh :call LanguageClient#textDocument_hover()<CR>\nmap <Leader>llg :call LanguageClient#textDocument_definition()<CR>\nmap <Leader>llr :call LanguageClient#textDocument_rename()<CR>\nmap <Leader>llf :call LanguageClient#textDocument_formatting()<CR>\nmap <Leader>llb :call LanguageClient#textDocument_references()<CR>\nmap <Leader>lla :call LanguageClient#textDocument_codeAction()<CR>\nmap <Leader>lls :call LanguageClient#textDocument_documentSymbol()<CR>\n\n\" Configure vim-poloygot\nlet g:javascript_plugin_flow = 1\n\n\" Configure Dash\nnmap <silent> <leader>s <Plug>DashSearch\n","uri":"file:///Users/jaredramirez/dev/src/github.com/jaredramirez/env/nvim/init.vim","version":0}
15:18:42 INFO main src/vim.rs:92 => Some("vim") {"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"languageId":"vim","text":"\" ------ PLUGINS ------\n\nif empty(glob('~/.config/nvim/autoload/plug.vim'))\n  silent !curl -fLo ~/.config/nvim/autoload/plug.vim --create-dirs\n    \\ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim\n  autocmd VimEnter * PlugInstall --sync | source ~/.config/nvim/init.vim\nendif\n\ncall plug#begin('~/.config/nvim/bundle')\n\n\" Navigation\nPlug 'ctrlpvim/ctrlp.vim'\nPlug 'sjbach/lusty'\nPlug 'christoomey/vim-tmux-navigator' \" See README for tmux setup\n\n\" Code formatting\n\" For Prettier -> https://github.com/prettier/prettier\nPlug 'prettier/vim-prettier', {\n  \\ 'do': 'yarn install',\n  \\ 'for': ['javascript', 'typescript', 'css', 'less', 'scss', 'json', 'graphql', 'markdown', 'vue']\n\\ }\n\" For ReasonML formatting -> https://github.com/reasonml/reason-cli\n\" For Elm formatting -> https://github.com/avh4/elm-format\n\" For Rust formatting -> https://github.com/rust-lang-nursery/rustfmt\n\" For Haskell formatting -> http://hackage.haskell.org/package/hfmt\nPlug 'w0rp/ale'\n\n\" Completion - I mostly rely on language severs + ncm2 for completion\nPlug 'ncm2/ncm2'\nPlug 'roxma/nvim-yarp'\nPlug 'ncm2/ncm2-tmux'\nPlug 'ncm2/ncm2-path'\nPlug 'ncm2/ncm2-bufword'\n\nPlug 'ncm2/ncm2-syntax'\nPlug 'Shougo/neco-syntax'\n\nPlug 'ncm2/ncm2-vim'\nPlug 'Shougo/neco-vim'\n\n\" LanguageClient (Ties into ncm2)\n\" For Haskell langauge server -> https://github.com/haskell/haskell-ide-engine\n\" For Rust langauge server -> https://github.com/rust-lang-nursery/rls\n\" For Ocaml/Reason language server -> https://github.com/freebroccolo/ocaml-language-server\n\" For Flow(JS) language server -> https://github.com/flowtype/flow-language-server\n\" For Typescript language server -> https://github.com/sourcegraph/javascript-typescript-langserver\nPlug 'autozimu/LanguageClient-neovim', {\n    \\ 'branch': 'next',\n    \\ 'do': 'bash install.sh',\n    \\ }\n\n\" Fuzzy finder - also used in the language server complemention menu\nPlug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }\n\n\" Git\nPlug 'airblade/vim-gitgutter'\n\n\" Syntax highlighting\nPlug 'sheerun/vim-polyglot'\nPlug 'luochen1990/rainbow'\nPlug 'haishanh/night-owl.vim'\nPlug 'lambdatoast/elm.vim'\n\n\" Other syntax highlighting - for the (few) languages not supported by polyglot\nPlug 'reasonml-editor/vim-reason-plus', {\n  \\ 'for': ['reason']\n\\ }\nPlug 'milch/vim-fastlane'\n\n\" Status Bar\nPlug 'itchyny/lightline.vim'\nPlug 'vim-airline/vim-airline-themes'\nPlug 'Yggdroot/indentLine'\nPlug 'edkolev/tmuxline.vim'\nPlug 'ap/vim-buftabline'\n\n\" For Dash -> https://kapeli.com/dash\nPlug 'rizzatti/dash.vim'\n\" For Wakatime -> https://kapeli.com/dash\nPlug 'wakatime/vim-wakatime'\n\" For Ack -> https://beyondgrep.com/\nPlug 'mileszs/ack.vim'\n\n\" Code Commenter\nPlug 'scrooloose/nerdcommenter'\n\n\" Defaults\nPlug 'tpope/vim-sensible'\nPlug 'tpope/vim-surround'\nPlug 'easymotion/vim-easymotion'\n\ncall plug#end()\n\n\" ------ GENERAL CONFIG ------\n\n\" Disable compatabliltiy with vi\nset nocompatible\n\n\" Hide buffer instead of abandoning when switching\nset hidden\n\n\" Set max line length for JS/TS\nautocmd BufRead,BufNewFile *.js,*jsx,*.ts,*.tsx setlocal colorcolumn=80\n\n\" Turn off spellcheck\nset nospell\n\n\" Show invisibles\nset list listchars=tab:··,trail:·,nbsp:·,eol:¬\n\n\" Enable syntax highlighting\nsyntax enable\n\n\" Enable file specific behavior like syntax highlighting and indentation\nfiletype on\nfiletype plugin on\nfiletype indent on\n\n\" Use system clipboard\nset clipboard=unnamed\n\n\" Disable toolbar\nset guioptions=F\n\n\" Search options\nset ignorecase\nset smartcase\n\n\" No sounds\nset visualbell\nset noerrorbells\n\n\" Set tabs\nset tabstop=2\nset shiftwidth=2\nset expandtab\nautocmd FileType elm,java setlocal tabstop=4 shiftwidth=4\n\n\" Color/Theme\nif (has(\"termguicolors\"))\n set termguicolors\nendif\n\nset background=dark\ncolorscheme night-owl\nhighlight PMenuSel guibg=#54738C ctermbg=66 gui=NONE cterm=NONE\nhighlight Comment cterm=italic\nhighlight clear Error\n\n\" Set view attributes\nset number\nset ruler\nset cursorline\n\n\" Make <Shift><K> inverse of <Shift><J>\nnnoremap K i<CR><Esc>\n\n\" Set Leader\nlet mapleader=\"\\<SPACE>\"\n\n\" Disabled Ctrl-C\ninoremap <C-c> <Nop>\n\n\" Keep cursor in the center of the screen\nset scrolloff=999\n\n\n\" ------ PLUGIN CONFIG ------\n\n\" Configure Ctrl-P\n\n\" Open Ctrl-P\nnnoremap <Leader>o :CtrlP<CR>\n\" Open Ctrl-P buffer\nnnoremap <Leader>b :CtrlPBuffer<CR>\n\" Ctrl-P ignores\nset wildignore+=*/tmp/*,*.so,*.swp,*.zip,*/node_modules/*,*/deps/*,*/_build/*,*/dist/*,*/build/*,*/legacy/*,*/elm-stuff/*\n\n\" Configure vim-polygot\nlet g:polyglot_disabled = ['reason', 'elm']\n\n\" Configure rainbow\nlet g:rainbow_active = 1\nlet g:rainbow_conf = {\n  \\ 'guifgs': ['#5FD7FF', '#FFFFAF', '#AFFFFF', '#FFD7FF'],\n  \\ 'ctermfgs': ['51', '229', '159', '225'],\n\\}\n\n\" Configure vim-prettier\n\n\" Make Prettier async\nlet g:prettier#exec_cmd_async = 1\n\" Disable quickfix\nlet g:prettier#quickfix_enabled = 0\n\" Make Prettier run on filesave\nautocmd BufWritePre *.js,*.jsx,*.mjs,*.ts,*.tsx,*.css,*.less,*.scss,*.json,*.graphql,*.md,*.vue PrettierAsync\n\n\" Set prettier back to defaults (vim-prettier has differnt defaults)\nlet g:prettier#config#single_quote = 'false'\nlet g:prettier#config#bracket_spacing = 'true'\nlet g:prettier#config#jsx_bracket_same_line = 'false'\nlet g:prettier#config#arrow_parens = 'avoid'\nlet g:prettier#config#trailing_comma = 'none'\nlet g:prettier#config#parser = 'babylon'\n\n\" Configure NERD Commenter\nlet g:NERDSpaceDelims = 1\n\n\" Configure lightline\nset noshowmode\nlet g:lightline = {\n  \\ 'colorscheme': 'seoul256',\n  \\ 'separator': { 'left': '', 'right': '' },\n  \\ 'subseparator': { 'left': '', 'right': '' },\n  \\ }\n\n\" Configure buftabline\nlet g:buftabline_indicators = 1\nhighlight BufTabLineFill guifg=#30302C ctermfg=58 guibg=#30302C ctermbg=58\nhighlight BufTabLineHidden guifg=NONE ctermfg=NONE guibg=NONE ctermbg=NONE\nhighlight BufTabLineCurrent guibg=#4E4E43 ctermbg=59\nhighlight BufTabLineHidden guibg=#30302C ctermbg=58\n\n\" Configure tmuxline\nautocmd VimEnter * Tmuxline\nlet g:tmuxline_preset = 'powerline'\nlet g:tmuxline_theme = 'lightline'\n\n\" Configure Ale\nlet g:ale_fix_on_save = 1\n\n\" Error Display\nhighlight ALEError guifg=#ff5874 ctermfg=204 guibg=NONE ctermbg=NONE\nhighlight ALEErrorSign guifg=#ff5874 ctermfg=204 guibg=NONE ctermbg=NONE\nhighlight ALEWarning guifg=ffd17c ctermfg=222 guibg=NONE ctermbg=NONE\nhighlight ALEWarningSign guifg=#ffd17c ctermfg=222 guibg=NONE ctermbg=NONE\nlet g:ale_sign_error = '✖'\nlet g:ale_sign_warning = '⚠'\nlet g:ale_sign_column_always = 1\n\n\" Configure auto-formatters\nlet g:ale_fixers = {\n\\   '*': ['remove_trailing_lines', 'trim_whitespace'],\n\\   'reason': ['refmt'],\n\\   'elm': ['elm-format'],\n\\   'rust': ['rustfmt'],\n\\   'haskell': ['hfmt']\n\\}\n\n\n\" Disable Ale linters for language that there is a language server for\n\" Langauge servers provide a much better experience, and while Ale + LS can be\n\" used together, I prefer to disable Ale\nlet g:ale_linters = {\n\\   'reason': [],\n\\   'ocaml': [],\n\\   'haskell': [],\n\\   'rust': [],\n\\   'javascript': [],\n\\   'typescript': []\n\\   'elm': []\n\\}\n\n\" Configure indentLine\nlet g:indentLine_char = '|'\n\n\" Configure ncm2\nautocmd BufEnter * call ncm2#enable_for_buffer()\nset completeopt=noinsert,menuone,noselect\n\nset shortmess+=c\ninoremap <expr> <CR> (pumvisible() ? \"\\<c-y>\\<cr>\" : \"\\<CR>\")\ninoremap <expr> <Tab> pumvisible() ? \"\\<C-n>\" : \"\\<Tab>\"\ninoremap <expr> <S-Tab> pumvisible() ? \"\\<C-p>\" : \"\\<S-Tab>\"\n\n\" Configure LanguageClient\n\n\" This is required for LanguageClient, but is already set above\n\" set hidden\n\n\" Always show sign column\nset signcolumn=yes\n\n\" Configure each filetype & language server to go with it\n\" For Haskell langauge server -> https://github.com/haskell/haskell-ide-engine\n\" For Rust langauge server -> https://github.com/rust-lang-nursery/rls\n\" For Ocamel/Reason language server -> https://github.com/freebroccolo/ocaml-language-server<Paste>\n\" For Flow(JS) language server -> https://github.com/flowtype/flow-language-server\n\" For Typescript language server -> https://github.com/sourcegraph/javascript-typescript-langserver\nlet g:LanguageClient_serverCommands = {\n    \\ 'elm': ['elm-language-server-exe'],\n    \\ 'reason': ['ocaml-language-server', '--stdio'],\n    \\ 'ocaml': ['ocaml-language-server', '--stdio'],\n    \\ 'javascript': ['flow-language-server', '--stdio'],\n    \\ 'javascript.jsx': ['flow-language-server', '--stdio'],\n    \\ 'haskell': ['hie-wrapper'],\n    \\ 'rust': ['rls'],\n    \\ 'typescript': ['javascript-typescript-stdio'],\n    \\ 'typescript.jsx': ['javascript-typescript-stdio'],\n    \\ }\nlet g:LanguageClient_rootMarkers = {\n    \\ 'elm': ['elm.json'],\n    \\ 'javascript': ['package.json'],\n    \\ 'reason': ['bs.config'],\n    \\ 'ocaml': ['*.opam'],\n    \\ 'haskell': ['stack.yaml'],\n    \\ 'rust': ['Cargo.toml'],\n    \\ }\n\nlet g:LanguageClient_loggingFile = './lc.log'\nlet g:LanguageClient_loggingLevel = 'DEBUG'\n\n\" javascript-typescript-stdio language server does work with flow\n\" https://github.com/sourcegraph/javascript-typescript-langserver/issues/390\n\n\" Mappings for interacting with langauge server\nnnoremap <F5> :call LanguageClient_contextMenu()<CR>\nmap <Leader>llh :call LanguageClient#textDocument_hover()<CR>\nmap <Leader>llg :call LanguageClient#textDocument_definition()<CR>\nmap <Leader>llr :call LanguageClient#textDocument_rename()<CR>\nmap <Leader>llf :call LanguageClient#textDocument_formatting()<CR>\nmap <Leader>llb :call LanguageClient#textDocument_references()<CR>\nmap <Leader>lla :call LanguageClient#textDocument_codeAction()<CR>\nmap <Leader>lls :call LanguageClient#textDocument_documentSymbol()<CR>\n\n\" Configure vim-poloygot\nlet g:javascript_plugin_flow = 1\n\n\" Configure Dash\nnmap <silent> <leader>s <Plug>DashSearch\n","uri":"file:///Users/jaredramirez/dev/src/github.com/jaredramirez/env/nvim/init.vim","version":0}}}
15:18:43 INFO reader-main src/vim.rs:380 <= None {"method": "languageClient/handleCursorMoved", "jsonrpc": "2.0", "params": {"languageId": "vim", "line": 261, "LSP#visible_line_start()": 237, "LSP#visible_line_end()": 285, "buftype": "", "filename": "/Users/jaredramirez/dev/src/github.com/jaredramirez/env/nvim/init.vim"}}
15:18:43 INFO main src/languageclient.rs:2221 Begin languageClient/handleCursorMoved
15:18:43 INFO main src/languageclient.rs:48 gather_args: [Buftype, Filename, Line] = [String(""), String("/Users/jaredramirez/dev/src/github.com/jaredramirez/env/nvim/init.vim"), Number(261)]
15:18:43 INFO main src/languageclient.rs:48 gather_args: ["LSP#visible_line_start()", "LSP#visible_line_end()"] = [Number(237), Number(285)]
15:18:43 INFO main src/vim.rs:92 => None {"jsonrpc":"2.0","method":"s:EchoEllipsis","params":[""]}
15:18:43 INFO main src/languageclient.rs:2313 End languageClient/handleCursorMoved
15:18:44 INFO reader-main src/vim.rs:380 <= None {"method": "languageClient/handleCursorMoved", "jsonrpc": "2.0", "params": {"languageId": "vim", "line": 260, "LSP#visible_line_start()": 236, "LSP#visible_line_end()": 284, "buftype": "", "filename": "/Users/jaredramirez/dev/src/github.com/jaredramirez/env/nvim/init.vim"}}
15:18:44 INFO main src/languageclient.rs:2221 Begin languageClient/handleCursorMoved
15:18:44 INFO main src/languageclient.rs:48 gather_args: [Buftype, Filename, Line] = [String(""), String("/Users/jaredramirez/dev/src/github.com/jaredramirez/env/nvim/init.vim"), Number(260)]
15:18:44 INFO main src/languageclient.rs:48 gather_args: ["LSP#visible_line_start()", "LSP#visible_line_end()"] = [Number(236), Number(284)]
15:18:44 INFO main src/languageclient.rs:2313 End languageClient/handleCursorMoved
15:18:44 INFO reader-main src/vim.rs:380 <= None {"method": "languageClient/handleCursorMoved", "jsonrpc": "2.0", "params": {"languageId": "vim", "line": 259, "LSP#visible_line_start()": 235, "LSP#visible_line_end()": 283, "buftype": "", "filename": "/Users/jaredramirez/dev/src/github.com/jaredramirez/env/nvim/init.vim"}}
15:18:44 INFO main src/languageclient.rs:2221 Begin languageClient/handleCursorMoved
15:18:44 INFO main src/languageclient.rs:48 gather_args: [Buftype, Filename, Line] = [String(""), String("/Users/jaredramirez/dev/src/github.com/jaredramirez/env/nvim/init.vim"), Number(259)]
15:18:44 INFO main src/languageclient.rs:48 gather_args: ["LSP#visible_line_start()", "LSP#visible_line_end()"] = [Number(235), Number(283)]
15:18:44 INFO main src/languageclient.rs:2313 End languageClient/handleCursorMoved
15:18:45 INFO reader-main src/vim.rs:380 <= None {"method": "languageClient/handleTextChanged", "jsonrpc": "2.0", "params": {"languageId": "vim", "buftype": "", "filename": "/Users/jaredramirez/dev/src/github.com/jaredramirez/env/nvim/init.vim"}}
15:18:45 INFO main src/languageclient.rs:2169 Begin languageClient/handleTextChanged
15:18:45 INFO main src/languageclient.rs:48 gather_args: [Buftype, Filename] = [String(""), String("/Users/jaredramirez/dev/src/github.com/jaredramirez/env/nvim/init.vim")]
15:18:45 INFO main src/languageclient.rs:1755 Begin textDocument/didChange
15:18:45 INFO main src/languageclient.rs:48 gather_args: [Buftype, LanguageId, Filename] = [String(""), String("vim"), String("/Users/jaredramirez/dev/src/github.com/jaredramirez/env/nvim/init.vim")]
15:18:45 INFO main src/languageclient.rs:29 Some arguments are not available. Requesting from vim. Keys: ["text"]. Exps: ["LSP#text()"]
15:18:45 INFO main src/vim.rs:92 => None {"jsonrpc":"2.0","method":"eval","params":["[LSP#text()]"],"id":10}
15:18:45 INFO reader-main src/vim.rs:380 <= None {"id": 10, "jsonrpc": "2.0", "result": [["\" ------ PLUGINS ------", "", "if empty(glob('~/.config/nvim/autoload/plug.vim'))", "  silent !curl -fLo ~/.config/nvim/autoload/plug.vim --create-dirs", "    \\ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim", "  autocmd VimEnter * PlugInstall --sync | source ~/.config/nvim/init.vim", "endif", "", "call plug#begin('~/.config/nvim/bundle')", "", "\" Navigation", "Plug 'ctrlpvim/ctrlp.vim'", "Plug 'sjbach/lusty'", "Plug 'christoomey/vim-tmux-navigator' \" See README for tmux setup", "", "\" Code formatting", "\" For Prettier -> https://github.com/prettier/prettier", "Plug 'prettier/vim-prettier', {", "  \\ 'do': 'yarn install',", "  \\ 'for': ['javascript', 'typescript', 'css', 'less', 'scss', 'json', 'graphql', 'markdown', 'vue']", "\\ }", "\" For ReasonML formatting -> https://github.com/reasonml/reason-cli", "\" For Elm formatting -> https://github.com/avh4/elm-format", "\" For Rust formatting -> https://github.com/rust-lang-nursery/rustfmt", "\" For Haskell formatting -> http://hackage.haskell.org/package/hfmt", "Plug 'w0rp/ale'", "", "\" Completion - I mostly rely on language severs + ncm2 for completion", "Plug 'ncm2/ncm2'", "Plug 'roxma/nvim-yarp'", "Plug 'ncm2/ncm2-tmux'", "Plug 'ncm2/ncm2-path'", "Plug 'ncm2/ncm2-bufword'", "", "Plug 'ncm2/ncm2-syntax'", "Plug 'Shougo/neco-syntax'", "", "Plug 'ncm2/ncm2-vim'", "Plug 'Shougo/neco-vim'", "", "\" LanguageClient (Ties into ncm2)", "\" For Haskell langauge server -> https://github.com/haskell/haskell-ide-engine", "\" For Rust langauge server -> https://github.com/rust-lang-nursery/rls", "\" For Ocaml/Reason language server -> https://github.com/freebroccolo/ocaml-language-server", "\" For Flow(JS) language server -> https://github.com/flowtype/flow-language-server", "\" For Typescript language server -> https://github.com/sourcegraph/javascript-typescript-langserver", "Plug 'autozimu/LanguageClient-neovim', {", "    \\ 'branch': 'next',", "    \\ 'do': 'bash install.sh',", "    \\ }", "", "\" Fuzzy finder - also used in the language server complemention menu", "Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }", "", "\" Git", "Plug 'airblade/vim-gitgutter'", "", "\" Syntax highlighting", "Plug 'sheerun/vim-polyglot'", "Plug 'luochen1990/rainbow'", "Plug 'haishanh/night-owl.vim'", "Plug 'lambdatoast/elm.vim'", "", "\" Other syntax highlighting - for the (few) languages not supported by polyglot", "Plug 'reasonml-editor/vim-reason-plus', {", "  \\ 'for': ['reason']", "\\ }", "Plug 'milch/vim-fastlane'", "", "\" Status Bar", "Plug 'itchyny/lightline.vim'", "Plug 'vim-airline/vim-airline-themes'", "Plug 'Yggdroot/indentLine'", "Plug 'edkolev/tmuxline.vim'", "Plug 'ap/vim-buftabline'", "", "\" For Dash -> https://kapeli.com/dash", "Plug 'rizzatti/dash.vim'", "\" For Wakatime -> https://kapeli.com/dash", "Plug 'wakatime/vim-wakatime'", "\" For Ack -> https://beyondgrep.com/", "Plug 'mileszs/ack.vim'", "", "\" Code Commenter", "Plug 'scrooloose/nerdcommenter'", "", "\" Defaults", "Plug 'tpope/vim-sensible'", "Plug 'tpope/vim-surround'", "Plug 'easymotion/vim-easymotion'", "", "call plug#end()", "", "\" ------ GENERAL CONFIG ------", "", "\" Disable compatabliltiy with vi", "set nocompatible", "", "\" Hide buffer instead of abandoning when switching", "set hidden", "", "\" Set max line length for JS/TS", "autocmd BufRead,BufNewFile *.js,*jsx,*.ts,*.tsx setlocal colorcolumn=80", "", "\" Turn off spellcheck", "set nospell", "", "\" Show invisibles", "set list listchars=tab:··,trail:·,nbsp:·,eol:¬", "", "\" Enable syntax highlighting", "syntax enable", "", "\" Enable file specific behavior like syntax highlighting and indentation", "filetype on", "filetype plugin on", "filetype indent on", "", "\" Use system clipboard", "set clipboard=unnamed", "", "\" Disable toolbar", "set guioptions=F", "", "\" Search options", "set ignorecase", "set smartcase", "", "\" No sounds", "set visualbell", "set noerrorbells", "", "\" Set tabs", "set tabstop=2", "set shiftwidth=2", "set expandtab", "autocmd FileType elm,java setlocal tabstop=4 shiftwidth=4", "", "\" Color/Theme", "if (has(\"termguicolors\"))", " set termguicolors", "endif", "", "set background=dark", "colorscheme night-owl", "highlight PMenuSel guibg=#54738C ctermbg=66 gui=NONE cterm=NONE", "highlight Comment cterm=italic", "highlight clear Error", "", "\" Set view attributes", "set number", "set ruler", "set cursorline", "", "\" Make <Shift><K> inverse of <Shift><J>", "nnoremap K i<CR><Esc>", "", "\" Set Leader", "let mapleader=\"\\<SPACE>\"", "", "\" Disabled Ctrl-C", "inoremap <C-c> <Nop>", "", "\" Keep cursor in the center of the screen", "set scrolloff=999", "", "", "\" ------ PLUGIN CONFIG ------", "", "\" Configure Ctrl-P", "", "\" Open Ctrl-P", "nnoremap <Leader>o :CtrlP<CR>", "\" Open Ctrl-P buffer", "nnoremap <Leader>b :CtrlPBuffer<CR>", "\" Ctrl-P ignores", "set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*/node_modules/*,*/deps/*,*/_build/*,*/dist/*,*/build/*,*/legacy/*,*/elm-stuff/*", "", "\" Configure vim-polygot", "let g:polyglot_disabled = ['reason', 'elm']", "", "\" Configure rainbow", "let g:rainbow_active = 1", "let g:rainbow_conf = {", "  \\ 'guifgs': ['#5FD7FF', '#FFFFAF', '#AFFFFF', '#FFD7FF'],", "  \\ 'ctermfgs': ['51', '229', '159', '225'],", "\\}", "", "\" Configure vim-prettier", "", "\" Make Prettier async", "let g:prettier#exec_cmd_async = 1", "\" Disable quickfix", "let g:prettier#quickfix_enabled = 0", "\" Make Prettier run on filesave", "autocmd BufWritePre *.js,*.jsx,*.mjs,*.ts,*.tsx,*.css,*.less,*.scss,*.json,*.graphql,*.md,*.vue PrettierAsync", "", "\" Set prettier back to defaults (vim-prettier has differnt defaults)", "let g:prettier#config#single_quote = 'false'", "let g:prettier#config#bracket_spacing = 'true'", "let g:prettier#config#jsx_bracket_same_line = 'false'", "let g:prettier#config#arrow_parens = 'avoid'", "let g:prettier#config#trailing_comma = 'none'", "let g:prettier#config#parser = 'babylon'", "", "\" Configure NERD Commenter", "let g:NERDSpaceDelims = 1", "", "\" Configure lightline", "set noshowmode", "let g:lightline = {", "  \\ 'colorscheme': 'seoul256',", "  \\ 'separator': { 'left': '', 'right': '' },", "  \\ 'subseparator': { 'left': '', 'right': '' },", "  \\ }", "", "\" Configure buftabline", "let g:buftabline_indicators = 1", "highlight BufTabLineFill guifg=#30302C ctermfg=58 guibg=#30302C ctermbg=58", "highlight BufTabLineHidden guifg=NONE ctermfg=NONE guibg=NONE ctermbg=NONE", "highlight BufTabLineCurrent guibg=#4E4E43 ctermbg=59", "highlight BufTabLineHidden guibg=#30302C ctermbg=58", "", "\" Configure tmuxline", "autocmd VimEnter * Tmuxline", "let g:tmuxline_preset = 'powerline'", "let g:tmuxline_theme = 'lightline'", "", "\" Configure Ale", "let g:ale_fix_on_save = 1", "", "\" Error Display", "highlight ALEError guifg=#ff5874 ctermfg=204 guibg=NONE ctermbg=NONE", "highlight ALEErrorSign guifg=#ff5874 ctermfg=204 guibg=NONE ctermbg=NONE", "highlight ALEWarning guifg=ffd17c ctermfg=222 guibg=NONE ctermbg=NONE", "highlight ALEWarningSign guifg=#ffd17c ctermfg=222 guibg=NONE ctermbg=NONE", "let g:ale_sign_error = '✖'", "let g:ale_sign_warning = '⚠'", "let g:ale_sign_column_always = 1", "", "\" Configure auto-formatters", "let g:ale_fixers = {", "\\   '*': ['remove_trailing_lines', 'trim_whitespace'],", "\\   'reason': ['refmt'],", "\\   'elm': ['elm-format'],", "\\   'rust': ['rustfmt'],", "\\   'haskell': ['hfmt']", "\\}", "", "", "\" Disable Ale linters for language that there is a language server for", "\" Langauge servers provide a much better experience, and while Ale + LS can be", "\" used together, I prefer to disable Ale", "let g:ale_linters = {", "\\   'reason': [],", "\\   'ocaml': [],", "\\   'haskell': [],", "\\   'rust': [],", "\\   'javascript': [],", "\\   'typescript': [],", "\\   'elm': []", "\\}", "", "\" Configure indentLine", "let g:indentLine_char = '|'", "", "\" Configure ncm2", "autocmd BufEnter * call ncm2#enable_for_buffer()", "set completeopt=noinsert,menuone,noselect", "", "set shortmess+=c", "inoremap <expr> <CR> (pumvisible() ? \"\\<c-y>\\<cr>\" : \"\\<CR>\")", "inoremap <expr> <Tab> pumvisible() ? \"\\<C-n>\" : \"\\<Tab>\"", "inoremap <expr> <S-Tab> pumvisible() ? \"\\<C-p>\" : \"\\<S-Tab>\"", "", "\" Configure LanguageClient", "", "\" This is required for LanguageClient, but is already set above", "\" set hidden", "", "\" Always show sign column", "set signcolumn=yes", "", "\" Configure each filetype & language server to go with it", "\" For Haskell langauge server -> https://github.com/haskell/haskell-ide-engine", "\" For Rust langauge server -> https://github.com/rust-lang-nursery/rls", "\" For Ocamel/Reason language server -> https://github.com/freebroccolo/ocaml-language-server<Paste>", "\" For Flow(JS) language server -> https://github.com/flowtype/flow-language-server", "\" For Typescript language server -> https://github.com/sourcegraph/javascript-typescript-langserver", "let g:LanguageClient_serverCommands = {", "    \\ 'elm': ['elm-language-server-exe'],", "    \\ 'reason': ['ocaml-language-server', '--stdio'],", "    \\ 'ocaml': ['ocaml-language-server', '--stdio'],", "    \\ 'javascript': ['flow-language-server', '--stdio'],", "    \\ 'javascript.jsx': ['flow-language-server', '--stdio'],", "    \\ 'haskell': ['hie-wrapper'],", "    \\ 'rust': ['rls'],", "    \\ 'typescript': ['javascript-typescript-stdio'],", "    \\ 'typescript.jsx': ['javascript-typescript-stdio'],", "    \\ }", "let g:LanguageClient_rootMarkers = {", "    \\ 'elm': ['elm.json'],", "    \\ 'javascript': ['package.json'],", "    \\ 'reason': ['bs.config'],", "    \\ 'ocaml': ['*.opam'],", "    \\ 'haskell': ['stack.yaml'],", "    \\ 'rust': ['Cargo.toml'],", "    \\ }", "", "let g:LanguageClient_loggingFile = './lc.log'", "let g:LanguageClient_loggingLevel = 'DEBUG'", "", "\" javascript-typescript-stdio language server does work with flow", "\" https://github.com/sourcegraph/javascript-typescript-langserver/issues/390", "", "\" Mappings for interacting with langauge server", "nnoremap <F5> :call LanguageClient_contextMenu()<CR>", "map <Leader>llh :call LanguageClient#textDocument_hover()<CR>", "map <Leader>llg :call LanguageClient#textDocument_definition()<CR>", "map <Leader>llr :call LanguageClient#textDocument_rename()<CR>", "map <Leader>llf :call LanguageClient#textDocument_formatting()<CR>", "map <Leader>llb :call LanguageClient#textDocument_references()<CR>", "map <Leader>lla :call LanguageClient#textDocument_codeAction()<CR>", "map <Leader>lls :call LanguageClient#textDocument_documentSymbol()<CR>", "", "\" Configure vim-poloygot", "let g:javascript_plugin_flow = 1", "", "\" Configure Dash", "nmap <silent> <leader>s <Plug>DashSearch", ""]]}
15:18:45 INFO main src/languageclient.rs:48 gather_args: [Text] = [Array([String("\" ------ PLUGINS ------"), String(""), String("if empty(glob(\'~/.config/nvim/autoload/plug.vim\'))"), String("  silent !curl -fLo ~/.config/nvim/autoload/plug.vim --create-dirs"), String("    \\ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim"), String("  autocmd VimEnter * PlugInstall --sync | source ~/.config/nvim/init.vim"), String("endif"), String(""), String("call plug#begin(\'~/.config/nvim/bundle\')"), String(""), String("\" Navigation"), String("Plug \'ctrlpvim/ctrlp.vim\'"), String("Plug \'sjbach/lusty\'"), String("Plug \'christoomey/vim-tmux-navigator\' \" See README for tmux setup"), String(""), String("\" Code formatting"), String("\" For Prettier -> https://github.com/prettier/prettier"), String("Plug \'prettier/vim-prettier\', {"), String("  \\ \'do\': \'yarn install\',"), String("  \\ \'for\': [\'javascript\', \'typescript\', \'css\', \'less\', \'scss\', \'json\', \'graphql\', \'markdown\', \'vue\']"), String("\\ }"), String("\" For ReasonML formatting -> https://github.com/reasonml/reason-cli"), String("\" For Elm formatting -> https://github.com/avh4/elm-format"), String("\" For Rust formatting -> https://github.com/rust-lang-nursery/rustfmt"), String("\" For Haskell formatting -> http://hackage.haskell.org/package/hfmt"), String("Plug \'w0rp/ale\'"), String(""), String("\" Completion - I mostly rely on language severs + ncm2 for completion"), String("Plug \'ncm2/ncm2\'"), String("Plug \'roxma/nvim-yarp\'"), String("Plug \'ncm2/ncm2-tmux\'"), String("Plug \'ncm2/ncm2-path\'"), String("Plug \'ncm2/ncm2-bufword\'"), String(""), String("Plug \'ncm2/ncm2-syntax\'"), String("Plug \'Shougo/neco-syntax\'"), String(""), String("Plug \'ncm2/ncm2-vim\'"), String("Plug \'Shougo/neco-vim\'"), String(""), String("\" LanguageClient (Ties into ncm2)"), String("\" For Haskell langauge server -> https://github.com/haskell/haskell-ide-engine"), String("\" For Rust langauge server -> https://github.com/rust-lang-nursery/rls"), String("\" For Ocaml/Reason language server -> https://github.com/freebroccolo/ocaml-language-server"), String("\" For Flow(JS) language server -> https://github.com/flowtype/flow-language-server"), String("\" For Typescript language server -> https://github.com/sourcegraph/javascript-typescript-langserver"), String("Plug \'autozimu/LanguageClient-neovim\', {"), String("    \\ \'branch\': \'next\',"), String("    \\ \'do\': \'bash install.sh\',"), String("    \\ }"), String(""), String("\" Fuzzy finder - also used in the language server complemention menu"), String("Plug \'junegunn/fzf\', { \'dir\': \'~/.fzf\', \'do\': \'./install --all\' }"), String(""), String("\" Git"), String("Plug \'airblade/vim-gitgutter\'"), String(""), String("\" Syntax highlighting"), String("Plug \'sheerun/vim-polyglot\'"), String("Plug \'luochen1990/rainbow\'"), String("Plug \'haishanh/night-owl.vim\'"), String("Plug \'lambdatoast/elm.vim\'"), String(""), String("\" Other syntax highlighting - for the (few) languages not supported by polyglot"), String("Plug \'reasonml-editor/vim-reason-plus\', {"), String("  \\ \'for\': [\'reason\']"), String("\\ }"), String("Plug \'milch/vim-fastlane\'"), String(""), String("\" Status Bar"), String("Plug \'itchyny/lightline.vim\'"), String("Plug \'vim-airline/vim-airline-themes\'"), String("Plug \'Yggdroot/indentLine\'"), String("Plug \'edkolev/tmuxline.vim\'"), String("Plug \'ap/vim-buftabline\'"), String(""), String("\" For Dash -> https://kapeli.com/dash"), String("Plug \'rizzatti/dash.vim\'"), String("\" For Wakatime -> https://kapeli.com/dash"), String("Plug \'wakatime/vim-wakatime\'"), String("\" For Ack -> https://beyondgrep.com/"), String("Plug \'mileszs/ack.vim\'"), String(""), String("\" Code Commenter"), String("Plug \'scrooloose/nerdcommenter\'"), String(""), String("\" Defaults"), String("Plug \'tpope/vim-sensible\'"), String("Plug \'tpope/vim-surround\'"), String("Plug \'easymotion/vim-easymotion\'"), String(""), String("call plug#end()"), String(""), String("\" ------ GENERAL CONFIG ------"), String(""), String("\" Disable compatabliltiy with vi"), String("set nocompatible"), String(""), String("\" Hide buffer instead of abandoning when switching"), String("set hidden"), String(""), String("\" Set max line length for JS/TS"), String("autocmd BufRead,BufNewFile *.js,*jsx,*.ts,*.tsx setlocal colorcolumn=80"), String(""), String("\" Turn off spellcheck"), String("set nospell"), String(""), String("\" Show invisibles"), String("set list listchars=tab:··,trail:·,nbsp:·,eol:¬"), String(""), String("\" Enable syntax highlighting"), String("syntax enable"), String(""), String("\" Enable file specific behavior like syntax highlighting and indentation"), String("filetype on"), String("filetype plugin on"), String("filetype indent on"), String(""), String("\" Use system clipboard"), String("set clipboard=unnamed"), String(""), String("\" Disable toolbar"), String("set guioptions=F"), String(""), String("\" Search options"), String("set ignorecase"), String("set smartcase"), String(""), String("\" No sounds"), String("set visualbell"), String("set noerrorbells"), String(""), String("\" Set tabs"), String("set tabstop=2"), String("set shiftwidth=2"), String("set expandtab"), String("autocmd FileType elm,java setlocal tabstop=4 shiftwidth=4"), String(""), String("\" Color/Theme"), String("if (has(\"termguicolors\"))"), String(" set termguicolors"), String("endif"), String(""), String("set background=dark"), String("colorscheme night-owl"), String("highlight PMenuSel guibg=#54738C ctermbg=66 gui=NONE cterm=NONE"), String("highlight Comment cterm=italic"), String("highlight clear Error"), String(""), String("\" Set view attributes"), String("set number"), String("set ruler"), String("set cursorline"), String(""), String("\" Make <Shift><K> inverse of <Shift><J>"), String("nnoremap K i<CR><Esc>"), String(""), String("\" Set Leader"), String("let mapleader=\"\\<SPACE>\""), String(""), String("\" Disabled Ctrl-C"), String("inoremap <C-c> <Nop>"), String(""), String("\" Keep cursor in the center of the screen"), String("set scrolloff=999"), String(""), String(""), String("\" ------ PLUGIN CONFIG ------"), String(""), String("\" Configure Ctrl-P"), String(""), String("\" Open Ctrl-P"), String("nnoremap <Leader>o :CtrlP<CR>"), String("\" Open Ctrl-P buffer"), String("nnoremap <Leader>b :CtrlPBuffer<CR>"), String("\" Ctrl-P ignores"), String("set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*/node_modules/*,*/deps/*,*/_build/*,*/dist/*,*/build/*,*/legacy/*,*/elm-stuff/*"), String(""), String("\" Configure vim-polygot"), String("let g:polyglot_disabled = [\'reason\', \'elm\']"), String(""), String("\" Configure rainbow"), String("let g:rainbow_active = 1"), String("let g:rainbow_conf = {"), String("  \\ \'guifgs\': [\'#5FD7FF\', \'#FFFFAF\', \'#AFFFFF\', \'#FFD7FF\'],"), String("  \\ \'ctermfgs\': [\'51\', \'229\', \'159\', \'225\'],"), String("\\}"), String(""), String("\" Configure vim-prettier"), String(""), String("\" Make Prettier async"), String("let g:prettier#exec_cmd_async = 1"), String("\" Disable quickfix"), String("let g:prettier#quickfix_enabled = 0"), String("\" Make Prettier run on filesave"), String("autocmd BufWritePre *.js,*.jsx,*.mjs,*.ts,*.tsx,*.css,*.less,*.scss,*.json,*.graphql,*.md,*.vue PrettierAsync"), String(""), String("\" Set prettier back to defaults (vim-prettier has differnt defaults)"), String("let g:prettier#config#single_quote = \'false\'"), String("let g:prettier#config#bracket_spacing = \'true\'"), String("let g:prettier#config#jsx_bracket_same_line = \'false\'"), String("let g:prettier#config#arrow_parens = \'avoid\'"), String("let g:prettier#config#trailing_comma = \'none\'"), String("let g:prettier#config#parser = \'babylon\'"), String(""), String("\" Configure NERD Commenter"), String("let g:NERDSpaceDelims = 1"), String(""), String("\" Configure lightline"), String("set noshowmode"), String("let g:lightline = {"), String("  \\ \'colorscheme\': \'seoul256\',"), String("  \\ \'separator\': { \'left\': \'\u{e0b0}\', \'right\': \'\u{e0b2}\' },"), String("  \\ \'subseparator\': { \'left\': \'\u{e0b1}\', \'right\': \'\u{e0b3}\' },"), String("  \\ }"), String(""), String("\" Configure buftabline"), String("let g:buftabline_indicators = 1"), String("highlight BufTabLineFill guifg=#30302C ctermfg=58 guibg=#30302C ctermbg=58"), String("highlight BufTabLineHidden guifg=NONE ctermfg=NONE guibg=NONE ctermbg=NONE"), String("highlight BufTabLineCurrent guibg=#4E4E43 ctermbg=59"), String("highlight BufTabLineHidden guibg=#30302C ctermbg=58"), String(""), String("\" Configure tmuxline"), String("autocmd VimEnter * Tmuxline"), String("let g:tmuxline_preset = \'powerline\'"), String("let g:tmuxline_theme = \'lightline\'"), String(""), String("\" Configure Ale"), String("let g:ale_fix_on_save = 1"), String(""), String("\" Error Display"), String("highlight ALEError guifg=#ff5874 ctermfg=204 guibg=NONE ctermbg=NONE"), String("highlight ALEErrorSign guifg=#ff5874 ctermfg=204 guibg=NONE ctermbg=NONE"), String("highlight ALEWarning guifg=ffd17c ctermfg=222 guibg=NONE ctermbg=NONE"), String("highlight ALEWarningSign guifg=#ffd17c ctermfg=222 guibg=NONE ctermbg=NONE"), String("let g:ale_sign_error = \'✖\'"), String("let g:ale_sign_warning = \'⚠\'"), String("let g:ale_sign_column_always = 1"), String(""), String("\" Configure auto-formatters"), String("let g:ale_fixers = {"), String("\\   \'*\': [\'remove_trailing_lines\', \'trim_whitespace\'],"), String("\\   \'reason\': [\'refmt\'],"), String("\\   \'elm\': [\'elm-format\'],"), String("\\   \'rust\': [\'rustfmt\'],"), String("\\   \'haskell\': [\'hfmt\']"), String("\\}"), String(""), String(""), String("\" Disable Ale linters for language that there is a language server for"), String("\" Langauge servers provide a much better experience, and while Ale + LS can be"), String("\" used together, I prefer to disable Ale"), String("let g:ale_linters = {"), String("\\   \'reason\': [],"), String("\\   \'ocaml\': [],"), String("\\   \'haskell\': [],"), String("\\   \'rust\': [],"), String("\\   \'javascript\': [],"), String("\\   \'typescript\': [],"), String("\\   \'elm\': []"), String("\\}"), String(""), String("\" Configure indentLine"), String("let g:indentLine_char = \'|\'"), String(""), String("\" Configure ncm2"), String("autocmd BufEnter * call ncm2#enable_for_buffer()"), String("set completeopt=noinsert,menuone,noselect"), String(""), String("set shortmess+=c"), String("inoremap <expr> <CR> (pumvisible() ? \"\\<c-y>\\<cr>\" : \"\\<CR>\")"), String("inoremap <expr> <Tab> pumvisible() ? \"\\<C-n>\" : \"\\<Tab>\""), String("inoremap <expr> <S-Tab> pumvisible() ? \"\\<C-p>\" : \"\\<S-Tab>\""), String(""), String("\" Configure LanguageClient"), String(""), String("\" This is required for LanguageClient, but is already set above"), String("\" set hidden"), String(""), String("\" Always show sign column"), String("set signcolumn=yes"), String(""), String("\" Configure each filetype & language server to go with it"), String("\" For Haskell langauge server -> https://github.com/haskell/haskell-ide-engine"), String("\" For Rust langauge server -> https://github.com/rust-lang-nursery/rls"), String("\" For Ocamel/Reason language server -> https://github.com/freebroccolo/ocaml-language-server<Paste>"), String("\" For Flow(JS) language server -> https://github.com/flowtype/flow-language-server"), String("\" For Typescript language server -> https://github.com/sourcegraph/javascript-typescript-langserver"), String("let g:LanguageClient_serverCommands = {"), String("    \\ \'elm\': [\'elm-language-server-exe\'],"), String("    \\ \'reason\': [\'ocaml-language-server\', \'--stdio\'],"), String("    \\ \'ocaml\': [\'ocaml-language-server\', \'--stdio\'],"), String("    \\ \'javascript\': [\'flow-language-server\', \'--stdio\'],"), String("    \\ \'javascript.jsx\': [\'flow-language-server\', \'--stdio\'],"), String("    \\ \'haskell\': [\'hie-wrapper\'],"), String("    \\ \'rust\': [\'rls\'],"), String("    \\ \'typescript\': [\'javascript-typescript-stdio\'],"), String("    \\ \'typescript.jsx\': [\'javascript-typescript-stdio\'],"), String("    \\ }"), String("let g:LanguageClient_rootMarkers = {"), String("    \\ \'elm\': [\'elm.json\'],"), String("    \\ \'javascript\': [\'package.json\'],"), String("    \\ \'reason\': [\'bs.config\'],"), String("    \\ \'ocaml\': [\'*.opam\'],"), String("    \\ \'haskell\': [\'stack.yaml\'],"), String("    \\ \'rust\': [\'Cargo.toml\'],"), String("    \\ }"), String(""), String("let g:LanguageClient_loggingFile = \'./lc.log\'"), String("let g:LanguageClient_loggingLevel = \'DEBUG\'"), String(""), String("\" javascript-typescript-stdio language server does work with flow"), String("\" https://github.com/sourcegraph/javascript-typescript-langserver/issues/390"), String(""), String("\" Mappings for interacting with langauge server"), String("nnoremap <F5> :call LanguageClient_contextMenu()<CR>"), String("map <Leader>llh :call LanguageClient#textDocument_hover()<CR>"), String("map <Leader>llg :call LanguageClient#textDocument_definition()<CR>"), String("map <Leader>llr :call LanguageClient#textDocument_rename()<CR>"), String("map <Leader>llf :call LanguageClient#textDocument_formatting()<CR>"), String("map <Leader>llb :call LanguageClient#textDocument_references()<CR>"), String("map <Leader>lla :call LanguageClient#textDocument_codeAction()<CR>"), String("map <Leader>lls :call LanguageClient#textDocument_documentSymbol()<CR>"), String(""), String("\" Configure vim-poloygot"), String("let g:javascript_plugin_flow = 1"), String(""), String("\" Configure Dash"), String("nmap <silent> <leader>s <Plug>DashSearch"), String("")])]
15:18:45 DEBUG main src/vim.rs:320 state.text_documents./Users/jaredramirez/dev/src/github.com/jaredramirez/env/nvim/init.vim.text: "\" ------ PLUGINS ------\n\nif empty(glob('~/.config/nvim/autoload/plug.vim'))\n  silent !curl -fLo ~/.config/nvim/autoload/plug.vim --create-dirs\n    \\ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim\n  autocmd VimEnter * PlugInstall --sync | source ~/.config/nvim/init.vim\nendif\n\ncall plug#begin('~/.config/nvim/bundle')\n\n\" Navigation\nPlug 'ctrlpvim/ctrlp.vim'\nPlug 'sjbach/lusty'\nPlug 'christoomey/vim-tmux-navigator' \" See README for tmux setup\n\n\" Code formatting\n\" For Prettier -> https://github.com/prettier/prettier\nPlug 'prettier/vim-prettier', {\n  \\ 'do': 'yarn install',\n  \\ 'for': ['javascript', 'typescript', 'css', 'less', 'scss', 'json', 'graphql', 'markdown', 'vue']\n\\ }\n\" For ReasonML formatting -> https://github.com/reasonml/reason-cli\n\" For Elm formatting -> https://github.com/avh4/elm-format\n\" For Rust formatting -> https://github.com/rust-lang-nursery/rustfmt\n\" For Haskell formatting -> http://hackage.haskell.org/package/hfmt\nPlug 'w0rp/ale'\n\n\" Completion - I mostly rely on language severs + ncm2 for completion\nPlug 'ncm2/ncm2'\nPlug 'roxma/nvim-yarp'\nPlug 'ncm2/ncm2-tmux'\nPlug 'ncm2/ncm2-path'\nPlug 'ncm2/ncm2-bufword'\n\nPlug 'ncm2/ncm2-syntax'\nPlug 'Shougo/neco-syntax'\n\nPlug 'ncm2/ncm2-vim'\nPlug 'Shougo/neco-vim'\n\n\" LanguageClient (Ties into ncm2)\n\" For Haskell langauge server -> https://github.com/haskell/haskell-ide-engine\n\" For Rust langauge server -> https://github.com/rust-lang-nursery/rls\n\" For Ocaml/Reason language server -> https://github.com/freebroccolo/ocaml-language-server\n\" For Flow(JS) language server -> https://github.com/flowtype/flow-language-server\n\" For Typescript language server -> https://github.com/sourcegraph/javascript-typescript-langserver\nPlug 'autozimu/LanguageClient-neovim', {\n    \\ 'branch': 'next',\n    \\ 'do': 'bash install.sh',\n    \\ }\n\n\" Fuzzy finder - also used in the language server complemention menu\nPlug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }\n\n\" Git\nPlug 'airblade/vim-gitgutter'\n\n\" Syntax highlighting\nPlug 'sheerun/vim-polyglot'\nPlug 'luochen1990/rainbow'\nPlug 'haishanh/night-owl.vim'\nPlug 'lambdatoast/elm.vim'\n\n\" Other syntax highlighting - for the (few) languages not supported by polyglot\nPlug 'reasonml-editor/vim-reason-plus', {\n  \\ 'for': ['reason']\n\\ }\nPlug 'milch/vim-fastlane'\n\n\" Status Bar\nPlug 'itchyny/lightline.vim'\nPlug 'vim-airline/vim-airline-themes'\nPlug 'Yggdroot/indentLine'\nPlug 'edkolev/tmuxline.vim'\nPlug 'ap/vim-buftabline'\n\n\" For Dash -> https://kapeli.com/dash\nPlug 'rizzatti/dash.vim'\n\" For Wakatime -> https://kapeli.com/dash\nPlug 'wakatime/vim-wakatime'\n\" For Ack -> https://beyondgrep.com/\nPlug 'mileszs/ack.vim'\n\n\" Code Commenter\nPlug 'scrooloose/nerdcommenter'\n\n\" Defaults\nPlug 'tpope/vim-sensible'\nPlug 'tpope/vim-surround'\nPlug 'easymotion/vim-easymotion'\n\ncall plug#end()\n\n\" ------ GENERAL CONFIG ------\n\n\" Disable compatabliltiy with vi\nset nocompatible\n\n\" Hide buffer instead of abandoning when switching\nset hidden\n\n\" Set max line length for JS/TS\nautocmd BufRead,BufNewFile *.js,*jsx,*.ts,*.tsx setlocal colorcolumn=80\n\n\" Turn off spellcheck\nset nospell\n\n\" Show invisibles\nset list listchars=tab:··,trail:·,nbsp:·,eol:¬\n\n\" Enable syntax highlighting\nsyntax enable\n\n\" Enable file specific behavior like syntax highlighting and indentation\nfiletype on\nfiletype plugin on\nfiletype indent on\n\n\" Use system clipboard\nset clipboard=unnamed\n\n\" Disable toolbar\nset guioptions=F\n\n\" Search options\nset ignorecase\nset smartcase\n\n\" No sounds\nset visualbell\nset noerrorbells\n\n\" Set tabs\nset tabstop=2\nset shiftwidth=2\nset expandtab\nautocmd FileType elm,java setlocal tabstop=4 shiftwidth=4\n\n\" Color/Theme\nif (has(\"termguicolors\"))\n set termguicolors\nendif\n\nset background=dark\ncolorscheme night-owl\nhighlight PMenuSel guibg=#54738C ctermbg=66 gui=NONE cterm=NONE\nhighlight Comment cterm=italic\nhighlight clear Error\n\n\" Set view attributes\nset number\nset ruler\nset cursorline\n\n\" Make <Shift><K> inverse of <Shift><J>\nnnoremap K i<CR><Esc>\n\n\" Set Leader\nlet mapleader=\"\\<SPACE>\"\n\n\" Disabled Ctrl-C\ninoremap <C-c> <Nop>\n\n\" Keep cursor in the center of the screen\nset scrolloff=999\n\n\n\" ------ PLUGIN CONFIG ------\n\n\" Configure Ctrl-P\n\n\" Open Ctrl-P\nnnoremap <Leader>o :CtrlP<CR>\n\" Open Ctrl-P buffer\nnnoremap <Leader>b :CtrlPBuffer<CR>\n\" Ctrl-P ignores\nset wildignore+=*/tmp/*,*.so,*.swp,*.zip,*/node_modules/*,*/deps/*,*/_build/*,*/dist/*,*/build/*,*/legacy/*,*/elm-stuff/*\n\n\" Configure vim-polygot\nlet g:polyglot_disabled = ['reason', 'elm']\n\n\" Configure rainbow\nlet g:rainbow_active = 1\nlet g:rainbow_conf = {\n  \\ 'guifgs': ['#5FD7FF', '#FFFFAF', '#AFFFFF', '#FFD7FF'],\n  \\ 'ctermfgs': ['51', '229', '159', '225'],\n\\}\n\n\" Configure vim-prettier\n\n\" Make Prettier async\nlet g:prettier#exec_cmd_async = 1\n\" Disable quickfix\nlet g:prettier#quickfix_enabled = 0\n\" Make Prettier run on filesave\nautocmd BufWritePre *.js,*.jsx,*.mjs,*.ts,*.tsx,*.css,*.less,*.scss,*.json,*.graphql,*.md,*.vue PrettierAsync\n\n\" Set prettier back to defaults (vim-prettier has differnt defaults)\nlet g:prettier#config#single_quote = 'false'\nlet g:prettier#config#bracket_spacing = 'true'\nlet g:prettier#config#jsx_bracket_same_line = 'false'\nlet g:prettier#config#arrow_parens = 'avoid'\nlet g:prettier#config#trailing_comma = 'none'\nlet g:prettier#config#parser = 'babylon'\n\n\" Configure NERD Commenter\nlet g:NERDSpaceDelims = 1\n\n\" Configure lightline\nset noshowmode\nlet g:lightline = {\n  \\ 'colorscheme': 'seoul256',\n  \\ 'separator': { 'left': '', 'right': '' },\n  \\ 'subseparator': { 'left': '', 'right': '' },\n  \\ }\n\n\" Configure buftabline\nlet g:buftabline_indicators = 1\nhighlight BufTabLineFill guifg=#30302C ctermfg=58 guibg=#30302C ctermbg=58\nhighlight BufTabLineHidden guifg=NONE ctermfg=NONE guibg=NONE ctermbg=NONE\nhighlight BufTabLineCurrent guibg=#4E4E43 ctermbg=59\nhighlight BufTabLineHidden guibg=#30302C ctermbg=58\n\n\" Configure tmuxline\nautocmd VimEnter * Tmuxline\nlet g:tmuxline_preset = 'powerline'\nlet g:tmuxline_theme = 'lightline'\n\n\" Configure Ale\nlet g:ale_fix_on_save = 1\n\n\" Error Display\nhighlight ALEError guifg=#ff5874 ctermfg=204 guibg=NONE ctermbg=NONE\nhighlight ALEErrorSign guifg=#ff5874 ctermfg=204 guibg=NONE ctermbg=NONE\nhighlight ALEWarning guifg=ffd17c ctermfg=222 guibg=NONE ctermbg=NONE\nhighlight ALEWarningSign guifg=#ffd17c ctermfg=222 guibg=NONE ctermbg=NONE\nlet g:ale_sign_error = '✖'\nlet g:ale_sign_warning = '⚠'\nlet g:ale_sign_column_always = 1\n\n\" Configure auto-formatters\nlet g:ale_fixers = {\n\\   '*': ['remove_trailing_lines', 'trim_whitespace'],\n\\   'reason': ['refmt'],\n\\   'elm': ['elm-format'],\n\\   'rust': ['rustfmt'],\n\\   'haskell': ['hfmt']\n\\}\n\n\n\" Disable Ale linters for language that there is a language server for\n\" Langauge servers provide a much better experience, and while Ale + LS can be\n\" used together, I prefer to disable Ale\nlet g:ale_linters = {\n\\   'reason': [],\n\\   'ocaml': [],\n\\   'haskell': [],\n\\   'rust': [],\n\\   'javascript': [],\n\\   'typescript': []\n\\   'elm': []\n\\}\n\n\" Configure indentLine\nlet g:indentLine_char = '|'\n\n\" Configure ncm2\nautocmd BufEnter * call ncm2#enable_for_buffer()\nset completeopt=noinsert,menuone,noselect\n\nset shortmess+=c\ninoremap <expr> <CR> (pumvisible() ? \"\\<c-y>\\<cr>\" : \"\\<CR>\")\ninoremap <expr> <Tab> pumvisible() ? \"\\<C-n>\" : \"\\<Tab>\"\ninoremap <expr> <S-Tab> pumvisible() ? \"\\<C-p>\" : \"\\<S-Tab>\"\n\n\" Configure LanguageClient\n\n\" This is required for LanguageClient, but is already set above\n\" set hidden\n\n\" Always show sign column\nset signcolumn=yes\n\n\" Configure each filetype & language server to go with it\n\" For Haskell langauge server -> https://github.com/haskell/haskell-ide-engine\n\" For Rust langauge server -> https://github.com/rust-lang-nursery/rls\n\" For Ocamel/Reason language server -> https://github.com/freebroccolo/ocaml-language-server<Paste>\n\" For Flow(JS) language server -> https://github.com/flowtype/flow-language-server\n\" For Typescript language server -> https://github.com/sourcegraph/javascript-typescript-langserver\nlet g:LanguageClient_serverCommands = {\n    \\ 'elm': ['elm-language-server-exe'],\n    \\ 'reason': ['ocaml-language-server', '--stdio'],\n    \\ 'ocaml': ['ocaml-language-server', '--stdio'],\n    \\ 'javascript': ['flow-language-server', '--stdio'],\n    \\ 'javascript.jsx': ['flow-language-server', '--stdio'],\n    \\ 'haskell': ['hie-wrapper'],\n    \\ 'rust': ['rls'],\n    \\ 'typescript': ['javascript-typescript-stdio'],\n    \\ 'typescript.jsx': ['javascript-typescript-stdio'],\n    \\ }\nlet g:LanguageClient_rootMarkers = {\n    \\ 'elm': ['elm.json'],\n    \\ 'javascript': ['package.json'],\n    \\ 'reason': ['bs.config'],\n    \\ 'ocaml': ['*.opam'],\n    \\ 'haskell': ['stack.yaml'],\n    \\ 'rust': ['Cargo.toml'],\n    \\ }\n\nlet g:LanguageClient_loggingFile = './lc.log'\nlet g:LanguageClient_loggingLevel = 'DEBUG'\n\n\" javascript-typescript-stdio language server does work with flow\n\" https://github.com/sourcegraph/javascript-typescript-langserver/issues/390\n\n\" Mappings for interacting with langauge server\nnnoremap <F5> :call LanguageClient_contextMenu()<CR>\nmap <Leader>llh :call LanguageClient#textDocument_hover()<CR>\nmap <Leader>llg :call LanguageClient#textDocument_definition()<CR>\nmap <Leader>llr :call LanguageClient#textDocument_rename()<CR>\nmap <Leader>llf :call LanguageClient#textDocument_formatting()<CR>\nmap <Leader>llb :call LanguageClient#textDocument_references()<CR>\nmap <Leader>lla :call LanguageClient#textDocument_codeAction()<CR>\nmap <Leader>lls :call LanguageClient#textDocument_documentSymbol()<CR>\n\n\" Configure vim-poloygot\nlet g:javascript_plugin_flow = 1\n\n\" Configure Dash\nnmap <silent> <leader>s <Plug>DashSearch\n" ==> "\" ------ PLUGINS ------\n\nif empty(glob('~/.config/nvim/autoload/plug.vim'))\n  silent !curl -fLo ~/.config/nvim/autoload/plug.vim --create-dirs\n    \\ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim\n  autocmd VimEnter * PlugInstall --sync | source ~/.config/nvim/init.vim\nendif\n\ncall plug#begin('~/.config/nvim/bundle')\n\n\" Navigation\nPlug 'ctrlpvim/ctrlp.vim'\nPlug 'sjbach/lusty'\nPlug 'christoomey/vim-tmux-navigator' \" See README for tmux setup\n\n\" Code formatting\n\" For Prettier -> https://github.com/prettier/prettier\nPlug 'prettier/vim-prettier', {\n  \\ 'do': 'yarn install',\n  \\ 'for': ['javascript', 'typescript', 'css', 'less', 'scss', 'json', 'graphql', 'markdown', 'vue']\n\\ }\n\" For ReasonML formatting -> https://github.com/reasonml/reason-cli\n\" For Elm formatting -> https://github.com/avh4/elm-format\n\" For Rust formatting -> https://github.com/rust-lang-nursery/rustfmt\n\" For Haskell formatting -> http://hackage.haskell.org/package/hfmt\nPlug 'w0rp/ale'\n\n\" Completion - I mostly rely on language severs + ncm2 for completion\nPlug 'ncm2/ncm2'\nPlug 'roxma/nvim-yarp'\nPlug 'ncm2/ncm2-tmux'\nPlug 'ncm2/ncm2-path'\nPlug 'ncm2/ncm2-bufword'\n\nPlug 'ncm2/ncm2-syntax'\nPlug 'Shougo/neco-syntax'\n\nPlug 'ncm2/ncm2-vim'\nPlug 'Shougo/neco-vim'\n\n\" LanguageClient (Ties into ncm2)\n\" For Haskell langauge server -> https://github.com/haskell/haskell-ide-engine\n\" For Rust langauge server -> https://github.com/rust-lang-nursery/rls\n\" For Ocaml/Reason language server -> https://github.com/freebroccolo/ocaml-language-server\n\" For Flow(JS) language server -> https://github.com/flowtype/flow-language-server\n\" For Typescript language server -> https://github.com/sourcegraph/javascript-typescript-langserver\nPlug 'autozimu/LanguageClient-neovim', {\n    \\ 'branch': 'next',\n    \\ 'do': 'bash install.sh',\n    \\ }\n\n\" Fuzzy finder - also used in the language server complemention menu\nPlug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }\n\n\" Git\nPlug 'airblade/vim-gitgutter'\n\n\" Syntax highlighting\nPlug 'sheerun/vim-polyglot'\nPlug 'luochen1990/rainbow'\nPlug 'haishanh/night-owl.vim'\nPlug 'lambdatoast/elm.vim'\n\n\" Other syntax highlighting - for the (few) languages not supported by polyglot\nPlug 'reasonml-editor/vim-reason-plus', {\n  \\ 'for': ['reason']\n\\ }\nPlug 'milch/vim-fastlane'\n\n\" Status Bar\nPlug 'itchyny/lightline.vim'\nPlug 'vim-airline/vim-airline-themes'\nPlug 'Yggdroot/indentLine'\nPlug 'edkolev/tmuxline.vim'\nPlug 'ap/vim-buftabline'\n\n\" For Dash -> https://kapeli.com/dash\nPlug 'rizzatti/dash.vim'\n\" For Wakatime -> https://kapeli.com/dash\nPlug 'wakatime/vim-wakatime'\n\" For Ack -> https://beyondgrep.com/\nPlug 'mileszs/ack.vim'\n\n\" Code Commenter\nPlug 'scrooloose/nerdcommenter'\n\n\" Defaults\nPlug 'tpope/vim-sensible'\nPlug 'tpope/vim-surround'\nPlug 'easymotion/vim-easymotion'\n\ncall plug#end()\n\n\" ------ GENERAL CONFIG ------\n\n\" Disable compatabliltiy with vi\nset nocompatible\n\n\" Hide buffer instead of abandoning when switching\nset hidden\n\n\" Set max line length for JS/TS\nautocmd BufRead,BufNewFile *.js,*jsx,*.ts,*.tsx setlocal colorcolumn=80\n\n\" Turn off spellcheck\nset nospell\n\n\" Show invisibles\nset list listchars=tab:··,trail:·,nbsp:·,eol:¬\n\n\" Enable syntax highlighting\nsyntax enable\n\n\" Enable file specific behavior like syntax highlighting and indentation\nfiletype on\nfiletype plugin on\nfiletype indent on\n\n\" Use system clipboard\nset clipboard=unnamed\n\n\" Disable toolbar\nset guioptions=F\n\n\" Search options\nset ignorecase\nset smartcase\n\n\" No sounds\nset visualbell\nset noerrorbells\n\n\" Set tabs\nset tabstop=2\nset shiftwidth=2\nset expandtab\nautocmd FileType elm,java setlocal tabstop=4 shiftwidth=4\n\n\" Color/Theme\nif (has(\"termguicolors\"))\n set termguicolors\nendif\n\nset background=dark\ncolorscheme night-owl\nhighlight PMenuSel guibg=#54738C ctermbg=66 gui=NONE cterm=NONE\nhighlight Comment cterm=italic\nhighlight clear Error\n\n\" Set view attributes\nset number\nset ruler\nset cursorline\n\n\" Make <Shift><K> inverse of <Shift><J>\nnnoremap K i<CR><Esc>\n\n\" Set Leader\nlet mapleader=\"\\<SPACE>\"\n\n\" Disabled Ctrl-C\ninoremap <C-c> <Nop>\n\n\" Keep cursor in the center of the screen\nset scrolloff=999\n\n\n\" ------ PLUGIN CONFIG ------\n\n\" Configure Ctrl-P\n\n\" Open Ctrl-P\nnnoremap <Leader>o :CtrlP<CR>\n\" Open Ctrl-P buffer\nnnoremap <Leader>b :CtrlPBuffer<CR>\n\" Ctrl-P ignores\nset wildignore+=*/tmp/*,*.so,*.swp,*.zip,*/node_modules/*,*/deps/*,*/_build/*,*/dist/*,*/build/*,*/legacy/*,*/elm-stuff/*\n\n\" Configure vim-polygot\nlet g:polyglot_disabled = ['reason', 'elm']\n\n\" Configure rainbow\nlet g:rainbow_active = 1\nlet g:rainbow_conf = {\n  \\ 'guifgs': ['#5FD7FF', '#FFFFAF', '#AFFFFF', '#FFD7FF'],\n  \\ 'ctermfgs': ['51', '229', '159', '225'],\n\\}\n\n\" Configure vim-prettier\n\n\" Make Prettier async\nlet g:prettier#exec_cmd_async = 1\n\" Disable quickfix\nlet g:prettier#quickfix_enabled = 0\n\" Make Prettier run on filesave\nautocmd BufWritePre *.js,*.jsx,*.mjs,*.ts,*.tsx,*.css,*.less,*.scss,*.json,*.graphql,*.md,*.vue PrettierAsync\n\n\" Set prettier back to defaults (vim-prettier has differnt defaults)\nlet g:prettier#config#single_quote = 'false'\nlet g:prettier#config#bracket_spacing = 'true'\nlet g:prettier#config#jsx_bracket_same_line = 'false'\nlet g:prettier#config#arrow_parens = 'avoid'\nlet g:prettier#config#trailing_comma = 'none'\nlet g:prettier#config#parser = 'babylon'\n\n\" Configure NERD Commenter\nlet g:NERDSpaceDelims = 1\n\n\" Configure lightline\nset noshowmode\nlet g:lightline = {\n  \\ 'colorscheme': 'seoul256',\n  \\ 'separator': { 'left': '', 'right': '' },\n  \\ 'subseparator': { 'left': '', 'right': '' },\n  \\ }\n\n\" Configure buftabline\nlet g:buftabline_indicators = 1\nhighlight BufTabLineFill guifg=#30302C ctermfg=58 guibg=#30302C ctermbg=58\nhighlight BufTabLineHidden guifg=NONE ctermfg=NONE guibg=NONE ctermbg=NONE\nhighlight BufTabLineCurrent guibg=#4E4E43 ctermbg=59\nhighlight BufTabLineHidden guibg=#30302C ctermbg=58\n\n\" Configure tmuxline\nautocmd VimEnter * Tmuxline\nlet g:tmuxline_preset = 'powerline'\nlet g:tmuxline_theme = 'lightline'\n\n\" Configure Ale\nlet g:ale_fix_on_save = 1\n\n\" Error Display\nhighlight ALEError guifg=#ff5874 ctermfg=204 guibg=NONE ctermbg=NONE\nhighlight ALEErrorSign guifg=#ff5874 ctermfg=204 guibg=NONE ctermbg=NONE\nhighlight ALEWarning guifg=ffd17c ctermfg=222 guibg=NONE ctermbg=NONE\nhighlight ALEWarningSign guifg=#ffd17c ctermfg=222 guibg=NONE ctermbg=NONE\nlet g:ale_sign_error = '✖'\nlet g:ale_sign_warning = '⚠'\nlet g:ale_sign_column_always = 1\n\n\" Configure auto-formatters\nlet g:ale_fixers = {\n\\   '*': ['remove_trailing_lines', 'trim_whitespace'],\n\\   'reason': ['refmt'],\n\\   'elm': ['elm-format'],\n\\   'rust': ['rustfmt'],\n\\   'haskell': ['hfmt']\n\\}\n\n\n\" Disable Ale linters for language that there is a language server for\n\" Langauge servers provide a much better experience, and while Ale + LS can be\n\" used together, I prefer to disable Ale\nlet g:ale_linters = {\n\\   'reason': [],\n\\   'ocaml': [],\n\\   'haskell': [],\n\\   'rust': [],\n\\   'javascript': [],\n\\   'typescript': [],\n\\   'elm': []\n\\}\n\n\" Configure indentLine\nlet g:indentLine_char = '|'\n\n\" Configure ncm2\nautocmd BufEnter * call ncm2#enable_for_buffer()\nset completeopt=noinsert,menuone,noselect\n\nset shortmess+=c\ninoremap <expr> <CR> (pumvisible() ? \"\\<c-y>\\<cr>\" : \"\\<CR>\")\ninoremap <expr> <Tab> pumvisible() ? \"\\<C-n>\" : \"\\<Tab>\"\ninoremap <expr> <S-Tab> pumvisible() ? \"\\<C-p>\" : \"\\<S-Tab>\"\n\n\" Configure LanguageClient\n\n\" This is required for LanguageClient, but is already set above\n\" set hidden\n\n\" Always show sign column\nset signcolumn=yes\n\n\" Configure each filetype & language server to go with it\n\" For Haskell langauge server -> https://github.com/haskell/haskell-ide-engine\n\" For Rust langauge server -> https://github.com/rust-lang-nursery/rls\n\" For Ocamel/Reason language server -> https://github.com/freebroccolo/ocaml-language-server<Paste>\n\" For Flow(JS) language server -> https://github.com/flowtype/flow-language-server\n\" For Typescript language server -> https://github.com/sourcegraph/javascript-typescript-langserver\nlet g:LanguageClient_serverCommands = {\n    \\ 'elm': ['elm-language-server-exe'],\n    \\ 'reason': ['ocaml-language-server', '--stdio'],\n    \\ 'ocaml': ['ocaml-language-server', '--stdio'],\n    \\ 'javascript': ['flow-language-server', '--stdio'],\n    \\ 'javascript.jsx': ['flow-language-server', '--stdio'],\n    \\ 'haskell': ['hie-wrapper'],\n    \\ 'rust': ['rls'],\n    \\ 'typescript': ['javascript-typescript-stdio'],\n    \\ 'typescript.jsx': ['javascript-typescript-stdio'],\n    \\ }\nlet g:LanguageClient_rootMarkers = {\n    \\ 'elm': ['elm.json'],\n    \\ 'javascript': ['package.json'],\n    \\ 'reason': ['bs.config'],\n    \\ 'ocaml': ['*.opam'],\n    \\ 'haskell': ['stack.yaml'],\n    \\ 'rust': ['Cargo.toml'],\n    \\ }\n\nlet g:LanguageClient_loggingFile = './lc.log'\nlet g:LanguageClient_loggingLevel = 'DEBUG'\n\n\" javascript-typescript-stdio language server does work with flow\n\" https://github.com/sourcegraph/javascript-typescript-langserver/issues/390\n\n\" Mappings for interacting with langauge server\nnnoremap <F5> :call LanguageClient_contextMenu()<CR>\nmap <Leader>llh :call LanguageClient#textDocument_hover()<CR>\nmap <Leader>llg :call LanguageClient#textDocument_definition()<CR>\nmap <Leader>llr :call LanguageClient#textDocument_rename()<CR>\nmap <Leader>llf :call LanguageClient#textDocument_formatting()<CR>\nmap <Leader>llb :call LanguageClient#textDocument_references()<CR>\nmap <Leader>lla :call LanguageClient#textDocument_codeAction()<CR>\nmap <Leader>lls :call LanguageClient#textDocument_documentSymbol()<CR>\n\n\" Configure vim-poloygot\nlet g:javascript_plugin_flow = 1\n\n\" Configure Dash\nnmap <silent> <leader>s <Plug>DashSearch\n"
15:18:45 DEBUG main src/vim.rs:320 state.text_documents./Users/jaredramirez/dev/src/github.com/jaredramirez/env/nvim/init.vim.version: 0 ==> 1
15:18:45 INFO main src/vim.rs:92 => Some("vim") {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"contentChanges":[{"text":"\" ------ PLUGINS ------\n\nif empty(glob('~/.config/nvim/autoload/plug.vim'))\n  silent !curl -fLo ~/.config/nvim/autoload/plug.vim --create-dirs\n    \\ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim\n  autocmd VimEnter * PlugInstall --sync | source ~/.config/nvim/init.vim\nendif\n\ncall plug#begin('~/.config/nvim/bundle')\n\n\" Navigation\nPlug 'ctrlpvim/ctrlp.vim'\nPlug 'sjbach/lusty'\nPlug 'christoomey/vim-tmux-navigator' \" See README for tmux setup\n\n\" Code formatting\n\" For Prettier -> https://github.com/prettier/prettier\nPlug 'prettier/vim-prettier', {\n  \\ 'do': 'yarn install',\n  \\ 'for': ['javascript', 'typescript', 'css', 'less', 'scss', 'json', 'graphql', 'markdown', 'vue']\n\\ }\n\" For ReasonML formatting -> https://github.com/reasonml/reason-cli\n\" For Elm formatting -> https://github.com/avh4/elm-format\n\" For Rust formatting -> https://github.com/rust-lang-nursery/rustfmt\n\" For Haskell formatting -> http://hackage.haskell.org/package/hfmt\nPlug 'w0rp/ale'\n\n\" Completion - I mostly rely on language severs + ncm2 for completion\nPlug 'ncm2/ncm2'\nPlug 'roxma/nvim-yarp'\nPlug 'ncm2/ncm2-tmux'\nPlug 'ncm2/ncm2-path'\nPlug 'ncm2/ncm2-bufword'\n\nPlug 'ncm2/ncm2-syntax'\nPlug 'Shougo/neco-syntax'\n\nPlug 'ncm2/ncm2-vim'\nPlug 'Shougo/neco-vim'\n\n\" LanguageClient (Ties into ncm2)\n\" For Haskell langauge server -> https://github.com/haskell/haskell-ide-engine\n\" For Rust langauge server -> https://github.com/rust-lang-nursery/rls\n\" For Ocaml/Reason language server -> https://github.com/freebroccolo/ocaml-language-server\n\" For Flow(JS) language server -> https://github.com/flowtype/flow-language-server\n\" For Typescript language server -> https://github.com/sourcegraph/javascript-typescript-langserver\nPlug 'autozimu/LanguageClient-neovim', {\n    \\ 'branch': 'next',\n    \\ 'do': 'bash install.sh',\n    \\ }\n\n\" Fuzzy finder - also used in the language server complemention menu\nPlug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }\n\n\" Git\nPlug 'airblade/vim-gitgutter'\n\n\" Syntax highlighting\nPlug 'sheerun/vim-polyglot'\nPlug 'luochen1990/rainbow'\nPlug 'haishanh/night-owl.vim'\nPlug 'lambdatoast/elm.vim'\n\n\" Other syntax highlighting - for the (few) languages not supported by polyglot\nPlug 'reasonml-editor/vim-reason-plus', {\n  \\ 'for': ['reason']\n\\ }\nPlug 'milch/vim-fastlane'\n\n\" Status Bar\nPlug 'itchyny/lightline.vim'\nPlug 'vim-airline/vim-airline-themes'\nPlug 'Yggdroot/indentLine'\nPlug 'edkolev/tmuxline.vim'\nPlug 'ap/vim-buftabline'\n\n\" For Dash -> https://kapeli.com/dash\nPlug 'rizzatti/dash.vim'\n\" For Wakatime -> https://kapeli.com/dash\nPlug 'wakatime/vim-wakatime'\n\" For Ack -> https://beyondgrep.com/\nPlug 'mileszs/ack.vim'\n\n\" Code Commenter\nPlug 'scrooloose/nerdcommenter'\n\n\" Defaults\nPlug 'tpope/vim-sensible'\nPlug 'tpope/vim-surround'\nPlug 'easymotion/vim-easymotion'\n\ncall plug#end()\n\n\" ------ GENERAL CONFIG ------\n\n\" Disable compatabliltiy with vi\nset nocompatible\n\n\" Hide buffer instead of abandoning when switching\nset hidden\n\n\" Set max line length for JS/TS\nautocmd BufRead,BufNewFile *.js,*jsx,*.ts,*.tsx setlocal colorcolumn=80\n\n\" Turn off spellcheck\nset nospell\n\n\" Show invisibles\nset list listchars=tab:··,trail:·,nbsp:·,eol:¬\n\n\" Enable syntax highlighting\nsyntax enable\n\n\" Enable file specific behavior like syntax highlighting and indentation\nfiletype on\nfiletype plugin on\nfiletype indent on\n\n\" Use system clipboard\nset clipboard=unnamed\n\n\" Disable toolbar\nset guioptions=F\n\n\" Search options\nset ignorecase\nset smartcase\n\n\" No sounds\nset visualbell\nset noerrorbells\n\n\" Set tabs\nset tabstop=2\nset shiftwidth=2\nset expandtab\nautocmd FileType elm,java setlocal tabstop=4 shiftwidth=4\n\n\" Color/Theme\nif (has(\"termguicolors\"))\n set termguicolors\nendif\n\nset background=dark\ncolorscheme night-owl\nhighlight PMenuSel guibg=#54738C ctermbg=66 gui=NONE cterm=NONE\nhighlight Comment cterm=italic\nhighlight clear Error\n\n\" Set view attributes\nset number\nset ruler\nset cursorline\n\n\" Make <Shift><K> inverse of <Shift><J>\nnnoremap K i<CR><Esc>\n\n\" Set Leader\nlet mapleader=\"\\<SPACE>\"\n\n\" Disabled Ctrl-C\ninoremap <C-c> <Nop>\n\n\" Keep cursor in the center of the screen\nset scrolloff=999\n\n\n\" ------ PLUGIN CONFIG ------\n\n\" Configure Ctrl-P\n\n\" Open Ctrl-P\nnnoremap <Leader>o :CtrlP<CR>\n\" Open Ctrl-P buffer\nnnoremap <Leader>b :CtrlPBuffer<CR>\n\" Ctrl-P ignores\nset wildignore+=*/tmp/*,*.so,*.swp,*.zip,*/node_modules/*,*/deps/*,*/_build/*,*/dist/*,*/build/*,*/legacy/*,*/elm-stuff/*\n\n\" Configure vim-polygot\nlet g:polyglot_disabled = ['reason', 'elm']\n\n\" Configure rainbow\nlet g:rainbow_active = 1\nlet g:rainbow_conf = {\n  \\ 'guifgs': ['#5FD7FF', '#FFFFAF', '#AFFFFF', '#FFD7FF'],\n  \\ 'ctermfgs': ['51', '229', '159', '225'],\n\\}\n\n\" Configure vim-prettier\n\n\" Make Prettier async\nlet g:prettier#exec_cmd_async = 1\n\" Disable quickfix\nlet g:prettier#quickfix_enabled = 0\n\" Make Prettier run on filesave\nautocmd BufWritePre *.js,*.jsx,*.mjs,*.ts,*.tsx,*.css,*.less,*.scss,*.json,*.graphql,*.md,*.vue PrettierAsync\n\n\" Set prettier back to defaults (vim-prettier has differnt defaults)\nlet g:prettier#config#single_quote = 'false'\nlet g:prettier#config#bracket_spacing = 'true'\nlet g:prettier#config#jsx_bracket_same_line = 'false'\nlet g:prettier#config#arrow_parens = 'avoid'\nlet g:prettier#config#trailing_comma = 'none'\nlet g:prettier#config#parser = 'babylon'\n\n\" Configure NERD Commenter\nlet g:NERDSpaceDelims = 1\n\n\" Configure lightline\nset noshowmode\nlet g:lightline = {\n  \\ 'colorscheme': 'seoul256',\n  \\ 'separator': { 'left': '', 'right': '' },\n  \\ 'subseparator': { 'left': '', 'right': '' },\n  \\ }\n\n\" Configure buftabline\nlet g:buftabline_indicators = 1\nhighlight BufTabLineFill guifg=#30302C ctermfg=58 guibg=#30302C ctermbg=58\nhighlight BufTabLineHidden guifg=NONE ctermfg=NONE guibg=NONE ctermbg=NONE\nhighlight BufTabLineCurrent guibg=#4E4E43 ctermbg=59\nhighlight BufTabLineHidden guibg=#30302C ctermbg=58\n\n\" Configure tmuxline\nautocmd VimEnter * Tmuxline\nlet g:tmuxline_preset = 'powerline'\nlet g:tmuxline_theme = 'lightline'\n\n\" Configure Ale\nlet g:ale_fix_on_save = 1\n\n\" Error Display\nhighlight ALEError guifg=#ff5874 ctermfg=204 guibg=NONE ctermbg=NONE\nhighlight ALEErrorSign guifg=#ff5874 ctermfg=204 guibg=NONE ctermbg=NONE\nhighlight ALEWarning guifg=ffd17c ctermfg=222 guibg=NONE ctermbg=NONE\nhighlight ALEWarningSign guifg=#ffd17c ctermfg=222 guibg=NONE ctermbg=NONE\nlet g:ale_sign_error = '✖'\nlet g:ale_sign_warning = '⚠'\nlet g:ale_sign_column_always = 1\n\n\" Configure auto-formatters\nlet g:ale_fixers = {\n\\   '*': ['remove_trailing_lines', 'trim_whitespace'],\n\\   'reason': ['refmt'],\n\\   'elm': ['elm-format'],\n\\   'rust': ['rustfmt'],\n\\   'haskell': ['hfmt']\n\\}\n\n\n\" Disable Ale linters for language that there is a language server for\n\" Langauge servers provide a much better experience, and while Ale + LS can be\n\" used together, I prefer to disable Ale\nlet g:ale_linters = {\n\\   'reason': [],\n\\   'ocaml': [],\n\\   'haskell': [],\n\\   'rust': [],\n\\   'javascript': [],\n\\   'typescript': [],\n\\   'elm': []\n\\}\n\n\" Configure indentLine\nlet g:indentLine_char = '|'\n\n\" Configure ncm2\nautocmd BufEnter * call ncm2#enable_for_buffer()\nset completeopt=noinsert,menuone,noselect\n\nset shortmess+=c\ninoremap <expr> <CR> (pumvisible() ? \"\\<c-y>\\<cr>\" : \"\\<CR>\")\ninoremap <expr> <Tab> pumvisible() ? \"\\<C-n>\" : \"\\<Tab>\"\ninoremap <expr> <S-Tab> pumvisible() ? \"\\<C-p>\" : \"\\<S-Tab>\"\n\n\" Configure LanguageClient\n\n\" This is required for LanguageClient, but is already set above\n\" set hidden\n\n\" Always show sign column\nset signcolumn=yes\n\n\" Configure each filetype & language server to go with it\n\" For Haskell langauge server -> https://github.com/haskell/haskell-ide-engine\n\" For Rust langauge server -> https://github.com/rust-lang-nursery/rls\n\" For Ocamel/Reason language server -> https://github.com/freebroccolo/ocaml-language-server<Paste>\n\" For Flow(JS) language server -> https://github.com/flowtype/flow-language-server\n\" For Typescript language server -> https://github.com/sourcegraph/javascript-typescript-langserver\nlet g:LanguageClient_serverCommands = {\n    \\ 'elm': ['elm-language-server-exe'],\n    \\ 'reason': ['ocaml-language-server', '--stdio'],\n    \\ 'ocaml': ['ocaml-language-server', '--stdio'],\n    \\ 'javascript': ['flow-language-server', '--stdio'],\n    \\ 'javascript.jsx': ['flow-language-server', '--stdio'],\n    \\ 'haskell': ['hie-wrapper'],\n    \\ 'rust': ['rls'],\n    \\ 'typescript': ['javascript-typescript-stdio'],\n    \\ 'typescript.jsx': ['javascript-typescript-stdio'],\n    \\ }\nlet g:LanguageClient_rootMarkers = {\n    \\ 'elm': ['elm.json'],\n    \\ 'javascript': ['package.json'],\n    \\ 'reason': ['bs.config'],\n    \\ 'ocaml': ['*.opam'],\n    \\ 'haskell': ['stack.yaml'],\n    \\ 'rust': ['Cargo.toml'],\n    \\ }\n\nlet g:LanguageClient_loggingFile = './lc.log'\nlet g:LanguageClient_loggingLevel = 'DEBUG'\n\n\" javascript-typescript-stdio language server does work with flow\n\" https://github.com/sourcegraph/javascript-typescript-langserver/issues/390\n\n\" Mappings for interacting with langauge server\nnnoremap <F5> :call LanguageClient_contextMenu()<CR>\nmap <Leader>llh :call LanguageClient#textDocument_hover()<CR>\nmap <Leader>llg :call LanguageClient#textDocument_definition()<CR>\nmap <Leader>llr :call LanguageClient#textDocument_rename()<CR>\nmap <Leader>llf :call LanguageClient#textDocument_formatting()<CR>\nmap <Leader>llb :call LanguageClient#textDocument_references()<CR>\nmap <Leader>lla :call LanguageClient#textDocument_codeAction()<CR>\nmap <Leader>lls :call LanguageClient#textDocument_documentSymbol()<CR>\n\n\" Configure vim-poloygot\nlet g:javascript_plugin_flow = 1\n\n\" Configure Dash\nnmap <silent> <leader>s <Plug>DashSearch\n"}],"textDocument":{"uri":"file:///Users/jaredramirez/dev/src/github.com/jaredramirez/env/nvim/init.vim","version":1}}}
15:18:46 INFO reader-main src/vim.rs:380 <= None {"method": "languageClient/handleBufWritePost", "jsonrpc": "2.0", "params": {"languageId": "vim", "buftype": "", "filename": "/Users/jaredramirez/dev/src/github.com/jaredramirez/env/nvim/init.vim"}}
15:18:46 INFO main src/languageclient.rs:2199 Begin languageClient/handleBufWritePost
15:18:46 INFO main src/languageclient.rs:1826 Begin textDocument/didSave
15:18:46 INFO main src/languageclient.rs:48 gather_args: [Buftype, LanguageId, Filename] = [String(""), String("vim"), String("/Users/jaredramirez/dev/src/github.com/jaredramirez/env/nvim/init.vim")]
15:18:46 INFO main src/vim.rs:92 => Some("vim") {"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/jaredramirez/dev/src/github.com/jaredramirez/env/nvim/init.vim"}}}
15:18:46 INFO reader-main src/vim.rs:380 <= None {"method": "exit", "jsonrpc": "2.0", "params": {"languageId": "vim", "buftype": ""}}
15:18:46 INFO main src/languageclient.rs:2005 Begin exit
15:18:46 INFO main src/languageclient.rs:48 gather_args: [LanguageId] = [String("vim")]
15:18:46 INFO main src/vim.rs:92 => Some("vim") {"jsonrpc":"2.0","method":"exit","params":null}
15:18:46 ERROR main src/languageclient.rs:2014 Error: NoLanguageServer { languageId: "vim" }
15:18:46 INFO main src/languageclient.rs:780 Begin cleanup
15:18:46 ERROR main src/languageclient.rs:2017 Error: ErrorMessage { msg: "No project root found! languageId: vim" }
15:18:46 INFO main src/languageclient.rs:2019 End exit
